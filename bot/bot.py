# /root/telegram-schedule-bot/bot/bot.py

import os
import asyncio
from datetime import datetime
from dotenv import load_dotenv
import sys

from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from .google_sheets import (
    get_available_dates, update_status, get_gspread_client,
    SPREADSHEET_NAME, REQUESTS_WORKSHEET_NAME, SCHEDULE_WORKSHEET_NAME,
    STATUS_BOOKED, STATUS_FREE, DATE_FORMAT_IN_SHEET  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
)
from aiogram.filters import CommandStart, StateFilter

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    print("–ü–û–ú–ò–õ–ö–ê: BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ .env —Ñ–∞–π–ª.", file=sys.stderr)
    exit()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# --- –°—Ç–∞–Ω–∏ FSM ---
class Form(StatesGroup):
    callback_name = State()
    booking_name = State()
    service_choice = State()
    phone_number = State()
    date = State()
    time = State()
    question = State()


# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
def get_service_choice_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìû –ó–∞–ª–∏—à–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="ask_contact")
    builder.button(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", callback_data="book_consultation")
    builder.adjust(1)
    return builder.as_markup()


def get_dates_keyboard(dates_dict):
    builder = InlineKeyboardBuilder()
    # –°–æ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏ –ø–µ—Ä–µ–¥ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
    try:
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ DATE_FORMAT_IN_SHEET –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π
        sorted_dates = sorted(dates_dict.keys(),
                              key=lambda d_str: datetime.strptime(d_str, DATE_FORMAT_IN_SHEET).date())
    except Exception as e_sort:
        print(f"Error sorting dates in get_dates_keyboard: {e_sort}. Using unsorted keys.", file=sys.stderr)
        sorted_dates = list(dates_dict.keys())  # Fallback to unsorted

    for date_str in sorted_dates:
        builder.button(text=date_str, callback_data=f"date_{date_str}")
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_service_choice_from_date"))
    return builder.as_markup()


def get_times_keyboard(times_list):
    builder = InlineKeyboardBuilder()
    # –°–æ—Ä—Ç—É—î–º–æ —á–∞—Å (—è–∫—â–æ –≤—ñ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM, —Ä—è–¥–∫–æ–≤–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ø—Ä–∞—Ü—é—î)
    for time_str in sorted(times_list):
        builder.button(text=time_str, callback_data=f"time_{time_str}")
    builder.adjust(3)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_date_selection"))
    return builder.as_markup()


def get_share_contact_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –º–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
async def show_service_choice_menu(target_message_or_callback: types.TelegramObject, state: FSMContext,
                                   user_name: str = None):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥, —Ä–µ–¥–∞–≥—É—é—á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—é—á–∏ –Ω–æ–≤–µ."""
    await state.set_state(Form.service_choice)
    keyboard = get_service_choice_keyboard()
    text = f"–ü—Ä–∏–≤—ñ—Ç, {user_name}! üëã\n–Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?" if user_name else "–ü—Ä–∏–≤—ñ—Ç! üëã\n–Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?"

    if isinstance(target_message_or_callback, CallbackQuery):
        try:
            await target_message_or_callback.message.edit_text(text, reply_markup=keyboard)
        except Exception:
            # –Ø–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è (–Ω–∞–ø—Ä., —Ç–µ–∫—Å—Ç —Ç–æ–π —Å–∞–º–∏–π), –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –¥–ª—è –ø–æ–∫–∞–∑—É –∫–Ω–æ–ø–æ–∫
            await target_message_or_callback.message.answer(text, reply_markup=keyboard)
    elif isinstance(target_message_or_callback, Message):
        await target_message_or_callback.answer(text, reply_markup=keyboard)


@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    # –û–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥–∏
    await show_service_choice_menu(message, state)


@dp.callback_query(StateFilter(Form.service_choice))
async def service_choice_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    choice_data = callback.data

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e_edit_markup:
        print(f"Could not edit reply markup: {e_edit_markup}", file=sys.stderr)

    if choice_data == "ask_contact":
        await state.set_state(Form.callback_name)
        await callback.message.answer("–î–æ–±—Ä–µ, —è –∑–∞–ø–∏—à—É –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    elif choice_data == "book_consultation":
        await state.set_state(Form.booking_name)
        await callback.message.answer("–î–æ–±—Ä–µ, –∑–∞–ø–∏—à–µ–º–æ –≤–∞—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    else:
        await callback.message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è. –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()  # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω, —è–∫—â–æ –æ–ø—Ü—ñ—è –Ω–µ–≤—ñ–¥–æ–º–∞


@dp.message(StateFilter(Form.callback_name))
async def callback_name_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.phone_number)
    keyboard = get_share_contact_keyboard()
    await message.answer(
        "–î—è–∫—É—é! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, "
        "–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É) –≤—Ä—É—á–Ω—É:",
        reply_markup=keyboard
    )


@dp.message(StateFilter(Form.booking_name))
async def booking_name_handler(message: Message, state: FSMContext):
    user_name = message.text
    await state.update_data(name=user_name)
    try:
        print(f"DEBUG: User {user_name} selected booking. Getting available dates...", file=sys.stderr)
        available_dates = get_available_dates()
        if not available_dates:
            await message.answer(
                f"–ù–∞ –∂–∞–ª—å, {user_name}, –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            await state.clear()
            await show_service_choice_menu(message, state, user_name)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞ –≤–∏–±—ñ—Ä –ø–æ—Å–ª—É–≥–∏
            return

        keyboard = get_dates_keyboard(available_dates)
        await message.answer(
            f"–î—è–∫—É—é, {user_name}! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Å—É:\n(–¥—ñ–π—Å–Ω—ñ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ 7 –¥–Ω—ñ–≤)\n–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:",
            reply_markup=keyboard)
        await state.set_state(Form.date)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç –¥–ª—è {user_name}: {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –¥–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()


@dp.message(StateFilter(Form.phone_number), F.contact)
async def contact_shared_handler(message: Message, state: FSMContext):
    contact_info = message.contact.phone_number
    user_id = message.from_user.id
    telegram_username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {user_id}")

    await state.update_data(contact=contact_info)

    try:
        client = get_gspread_client()
        sheet = client.open(SPREADSHEET_NAME).worksheet(REQUESTS_WORKSHEET_NAME)
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        print(f"DEBUG: Saving SHARED contact for {user_name} - {contact_info}...", file=sys.stderr)
        sheet.append_row([
            user_name, contact_info, "–ó–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ (–∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—à–∞—Ä–µ–Ω–æ)",
            telegram_username, "", "", timestamp
        ])
        print("DEBUG: SHARED contact info saved.", file=sys.stderr)
        await message.answer(
            f"–î—è–∫—É—é, {user_name}! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {contact_info} –æ—Ç—Ä–∏–º–∞–Ω–æ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await cmd_start(message, state)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è SHARED –∫–æ–Ω—Ç–∞–∫—Ç—É: {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö...",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()


@dp.message(StateFilter(Form.phone_number), F.text)
async def get_phone_number_text_handler(message: Message, state: FSMContext):
    contact_info = message.text
    user_id = message.from_user.id
    telegram_username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {user_id}")

    await state.update_data(contact=contact_info)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç

    try:
        client = get_gspread_client()
        sheet = client.open(SPREADSHEET_NAME).worksheet(REQUESTS_WORKSHEET_NAME)
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        print(f"DEBUG: Saving TYPED contact for {user_name} - {contact_info}...", file=sys.stderr)
        sheet.append_row([
            user_name, contact_info, "–ó–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ (–∫–æ–Ω—Ç–∞–∫—Ç –≤–≤–µ–¥–µ–Ω–æ)",
            telegram_username, "", "", timestamp
        ])
        print("DEBUG: TYPED contact info saved.", file=sys.stderr)
        await message.answer(
            f"–î—è–∫—É—é, {user_name}! –í–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ: '{contact_info}' –æ—Ç—Ä–∏–º–∞–Ω—ñ. –Ø –∑–≤'—è–∂—É—Å—è –∑ –≤–∞–º–∏.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await cmd_start(message, state)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è TYPED –∫–æ–Ω—Ç–∞–∫—Ç—É: {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö...",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" ---
@dp.callback_query(F.data == "back_to_service_choice_from_date", StateFilter(Form.date))
async def back_to_service_choice_from_date_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_data = await state.get_data()
    user_name = user_data.get("name")
    await show_service_choice_menu(callback, state, user_name)


@dp.callback_query(F.data == "back_to_date_selection", StateFilter(Form.time))
async def back_to_date_selection_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_data = await state.get_data()
    user_name = user_data.get("name")  # –Ü–º'—è –≤–∂–µ –º–∞—î –±—É—Ç–∏ –≤ —Å—Ç–∞–Ω—ñ
    try:
        available_dates = get_available_dates()
        if not available_dates:
            await callback.message.edit_text("–ù–∞ –∂–∞–ª—å, –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç. –ü–æ–≤–µ—Ä—Ç–∞—é –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.")
            await show_service_choice_menu(callback, state, user_name)
            return

        keyboard = get_dates_keyboard(available_dates)
        await callback.message.edit_text(
            f"{user_name}, –æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Å—É:\n(–¥—ñ–π—Å–Ω—ñ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ 7 –¥–Ω—ñ–≤)\n–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:",
            reply_markup=keyboard
        )
        await state.set_state(Form.date)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ back_to_date_selection_handler: {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤–µ—Ä—Ç–∞—é –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.")
        await show_service_choice_menu(callback, state, user_name)


@dp.callback_query(StateFilter(Form.date), F.data.startswith("date_"))
async def get_date_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    selected_date = callback.data.split("date_")[1]
    try:
        available_dates = get_available_dates()
        if selected_date in available_dates and available_dates[selected_date]:
            available_times = available_dates[selected_date]
            await state.update_data(date=selected_date)
            await state.set_state(Form.time)
            keyboard = get_times_keyboard(available_times)
            await callback.message.edit_text(
                f"–î–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏ –Ω–∞ {selected_date}:\n–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
                reply_markup=keyboard
            )
        else:
            keyboard = get_dates_keyboard(available_dates)  # –û–Ω–æ–≤–ª—é—î–º–æ, –±–æ –¥–∞–Ω—ñ –º–æ–≥–ª–∏ –∑–º—ñ–Ω–∏—Ç–∏—Å—è
            await callback.message.edit_text(
                "–ù–∞ –∂–∞–ª—å, —Ü—è –¥–∞—Ç–∞ –∞–±–æ —á–∞—Å –Ω–∞ –Ω–µ—ó –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥'.",
                reply_markup=keyboard
            )
            await state.set_state(Form.date)  # –ó–∞–ª–∏—à–∞—î–º–æ—Å—å —É —Å—Ç–∞–Ω—ñ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è/–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∞—Ç–∏ (callback): {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()


@dp.callback_query(StateFilter(Form.time), F.data.startswith("time_"))
async def get_time_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    selected_time = callback.data.split("time_")[1]
    user_data = await state.get_data()
    selected_date = user_data.get("date")

    if not selected_date:
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É (–¥–∞—Ç–∞). –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()
        return

    try:
        booking_successful = update_status(selected_date, selected_time, STATUS_BOOKED)
        if booking_successful:
            await state.update_data(time=selected_time)
            await state.set_state(Form.question)
            await callback.message.edit_text(
                f"–ß–∞—Å {selected_date} {selected_time} —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ!\n–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –º–µ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:"
            )
        else:
            current_available_dates = get_available_dates()
            if selected_date in current_available_dates and current_available_dates[selected_date]:
                keyboard = get_times_keyboard(current_available_dates[selected_date])
                await callback.message.edit_text(
                    f"–ù–∞ –∂–∞–ª—å, —á–∞—Å {selected_time} –Ω–∞ {selected_date} —â–æ–π–Ω–æ –∑–∞–π–Ω—è–ª–∏ –∞–±–æ —Å—Ç–∞–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–º. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π:",
                    reply_markup=keyboard
                )
                # –ó–∞–ª–∏—à–∞—î–º–æ—Å—å —É —Å—Ç–∞–Ω—ñ –≤–∏–±–æ—Ä—É —á–∞—Å—É –¥–ª—è —Ç—ñ—î—ó –∂ –¥–∞—Ç–∏
                await state.set_state(Form.time)
            else:  # –Ø–∫—â–æ –Ω–∞ —Ü—é –¥–∞—Ç—É –±—ñ–ª—å—à–µ –≤–∑–∞–≥–∞–ª—ñ –Ω–µ–º–∞—î —á–∞—Å—É
                await callback.message.edit_text(
                    f"–ù–∞ –∂–∞–ª—å, –Ω–∞ {selected_date} –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫.")
                await state.clear()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–ø—Ä–æ–±–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —á–∞—Å: {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()


@dp.message(StateFilter(Form.question))
async def get_question_handler(message: Message, state: FSMContext):
    question = message.text
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {message.from_user.id}")
    selected_date = user_data.get("date")
    selected_time = user_data.get("time")
    user_id = message.from_user.id
    telegram_username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"
    contact_info = telegram_username  # –î–ª—è –≥—ñ–ª–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –∫–æ–Ω—Ç–∞–∫—Ç –±–µ—Ä–µ–º–æ –∑ –¢–ì

    if not selected_date or not selected_time:
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É (–¥–∞—Ç–∞/—á–∞—Å). –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()
        return

    try:
        client = get_gspread_client()
        sheet = client.open(SPREADSHEET_NAME).worksheet(REQUESTS_WORKSHEET_NAME)
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        print(f"DEBUG: Saving appointment for {user_name}...", file=sys.stderr)
        sheet.append_row([
            user_name, contact_info, question, str(user_id),
            selected_date, selected_time, timestamp
        ])
        print("DEBUG: Appointment saved to –ó–∞—è–≤–∫–∏ sheet.", file=sys.stderr)
        await message.answer(
            f"–î—è–∫—É—é, {user_name}! –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é ({selected_date} {selected_time}) –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")

        lawyer_contact_for_booking_questions = "–í–ê–®_–¢–ï–õ–ï–§–û–ù_–ê–ë–û_EMAIL_–î–õ–Ø_–ó–ê–ü–ò–¢–ê–ù–¨"  # –ó–ê–ú–Ü–ù–Ü–¢–¨
        payment_details_text = '–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤–∞–º –¥–æ–¥–∞—Ç–∫–æ–≤–æ. –û–ø–ª–∞—Ç—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.'  # –ó–ê–ú–Ü–ù–Ü–¢–¨/–£–¢–û–ß–ù–Ü–¢–¨

        details_text_html = (
            f"üóìÔ∏è <b>–î–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É:</b> {selected_date} –æ {selected_time}.\n\n"
            f"<b>–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:</b>\n\n"
            f"1Ô∏è‚É£ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–µ–∑–∞–¥–æ–≤–≥–æ –¥–æ –ø–æ—á–∞—Ç–∫—É –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º (<code>{contact_info}</code>), —â–æ–± —É–∑–≥–æ–¥–∏—Ç–∏ –∑—Ä—É—á–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (Zoom, Google Meet, Teams, Viber, WhatsApp, Telegram —Ç–æ—â–æ) —Ç–∞ –Ω–∞–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n\n"
            f"2Ô∏è‚É£ <b>–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞:</b> –Ø–∫—â–æ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –ø—ñ–¥–≥–æ—Ç—É–π—Ç–µ —ó—Ö –∫–æ–ø—ñ—ó/—Ñ–æ—Ç–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–±–µ–∑–ø–µ—á—Ç–µ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–∞ —Ç–∏—Ö–µ –º—ñ—Å—Ü–µ.\n\n"
            f"3Ô∏è‚É£ <b>–û–ø–ª–∞—Ç–∞:</b> –í–∞—Ä—Ç—ñ—Å—Ç—å - <b>1000 –≥—Ä–Ω/–≥–æ–¥</b>. {payment_details_text}\n\n"
            f"4Ô∏è‚É£ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è:</b> –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ñ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è. –ê–¥–≤–æ–∫–∞—Ç –ú–µ—Ä–∫–æ–≤–∏—á –ë–æ–≥–¥–∞–Ω –Ω–∞–¥–∞—Å—Ç—å –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ä–æ–∑'—è—Å–Ω–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.\n\n"
            f"5Ô∏è‚É£ <b>–ó–≤'—è–∑–æ–∫:</b> –ó —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å —â–æ–¥–æ –∑–∞–ø–∏—Å—É <i>–¥–æ</i> –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å: {lawyer_contact_for_booking_questions}.\n\n"
            f"–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∑–≤'—è–∑–æ–∫ –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏!"
        )
        await message.answer(details_text_html, parse_mode="HTML")
        await cmd_start(message, state)  # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ —Å—Ç–∞—Ä—Ç
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –≤ Google Sheets: {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É...")
        await state.clear()

# –ë–ª–æ–∫ –∑–∞–ø—É—Å–∫—É polling –ù–ï –ø–æ—Ç—Ä—ñ–±–µ–Ω, –æ—Å–∫—ñ–ª—å–∫–∏ FastAPI/Uvicorn –∫–µ—Ä—É—î —Ü–∏–∫–ª–æ–º –ø–æ–¥—ñ–π.
# async def main_polling():
# await dp.start_polling(bot)
# if __name__ == '__main__':
# import logging
# logging.basicConfig(level=logging.INFO, stream=sys.stdout)
# asyncio.run(main_polling())