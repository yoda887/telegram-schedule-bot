# /root/telegram-schedule-bot/bot/bot.py

import os
import asyncio
from datetime import datetime
from dotenv import load_dotenv
import sys

from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –Ø–≤–Ω–∏–π –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
from .google_sheets import get_available_dates, update_status, get_gspread_client, SPREADSHEET_NAME, REQUESTS_WORKSHEET_NAME, STATUS_BOOKED, STATUS_FREE # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
# –Ü–º–ø–æ—Ä—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è Aiogram 3.x
from aiogram.filters import CommandStart, StateFilter

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    print("–ü–û–ú–ò–õ–ö–ê: BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ .env —Ñ–∞–π–ª.", file=sys.stderr)
    exit()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –°—Ç–∞–Ω–∏ FSM ---
class Form(StatesGroup):
    # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —ñ–º–µ–Ω—ñ –Ω–∞ –¥–≤–∞ –æ–∫—Ä–µ–º–∏—Ö, —â–æ–± –∑–Ω–∞—Ç–∏, –∑ —è–∫–æ—ó –≥—ñ–ª–∫–∏ –ø—Ä–∏–π—à–ª–∏
    callback_name = State()  # –Ü–º'—è –¥–ª—è –∑–∞–ø–∏—Ç—É –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫
    booking_name = State()   # –Ü–º'—è –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é
    service_choice = State() # –í–∏–±—ñ—Ä –ø–æ—Å–ª—É–≥–∏ (—Ç–µ–ø–µ—Ä —Ü–µ –ø–µ—Ä—à–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è /start)
    phone_number = State()   # –ù–æ–º–µ—Ä –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    date = State()           # –í–∏–±—ñ—Ä –¥–∞—Ç–∏
    time = State()           # –í–∏–±—ñ—Ä —á–∞—Å—É
    question = State()       # –ü–∏—Ç–∞–Ω–Ω—è

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
# (–§—É–Ω–∫—Ü—ñ—ó get_service_choice_keyboard, get_dates_keyboard, get_times_keyboard –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –ë–ï–ó –ó–ú–Ü–ù –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)
def get_service_choice_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìû –ó–∞–ª–∏—à–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="ask_contact")
    builder.button(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", callback_data="book_consultation")
    builder.adjust(1)
    return builder.as_markup()

def get_dates_keyboard(dates_dict):
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏."""
    builder = InlineKeyboardBuilder()
    # –°–æ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏ –ø–µ—Ä–µ–¥ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
    sorted_dates = sorted(dates_dict.keys(), key=lambda d: datetime.strptime(d, "%d.%m.%Y").date()) # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–†–†–†–†
    for date_str in sorted_dates:
        builder.button(text=date_str, callback_data=f"date_{date_str}")
    builder.adjust(2)
    return builder.as_markup()

def get_times_keyboard(times_list):
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º —á–∞—Å–æ–º."""
    builder = InlineKeyboardBuilder()
    # –°–æ—Ä—Ç—É—î–º–æ —á–∞—Å –ø–µ—Ä–µ–¥ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —ñ —è–∫—â–æ —Ñ–æ—Ä–º–∞—Ç –¥–æ–∑–≤–æ–ª—è—î –ø—Ä–æ—Å—Ç–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤)
    for time_str in sorted(times_list):
        builder.button(text=time_str, callback_data=f"time_{time_str}")
    builder.adjust(3)
    return builder.as_markup()

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ -> –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥–∏
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    keyboard = get_service_choice_keyboard()
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! üëã\n–Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?", reply_markup=keyboard)
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥–∏
    await state.set_state(Form.service_choice)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥–∏ -> –ü–∏—Ç–∞—î–º–æ —ñ–º'—è
@dp.callback_query(StateFilter(Form.service_choice))
async def service_choice_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    choice_data = callback.data

    if choice_data == "ask_contact":
        # –ü–∏—Ç–∞—î–º–æ —ñ–º'—è —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ —É —Å—Ç–∞–Ω callback_name
        await state.set_state(Form.callback_name)
        await callback.message.edit_text("–î–æ–±—Ä–µ, —è –∑–∞–ø–∏—à—É –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:") # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    elif choice_data == "book_consultation":
        # –ü–∏—Ç–∞—î–º–æ —ñ–º'—è —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ —É —Å—Ç–∞–Ω booking_name
        await state.set_state(Form.booking_name)
        await callback.message.edit_text("–î–æ–±—Ä–µ, –∑–∞–ø–∏—à–µ–º–æ –≤–∞—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:") # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    else:
        await callback.message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è. –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –ü–Ü–°–õ–Ø –≤–∏–±–æ—Ä—É "–ó–∞–ª–∏—à–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç" -> –ü–∏—Ç–∞—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
@dp.message(StateFilter(Form.callback_name))
async def callback_name_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è
    await state.set_state(Form.phone_number)
    await message.answer("–î—è–∫—É—é! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É):")

# –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –ü–Ü–°–õ–Ø –≤–∏–±–æ—Ä—É "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è..." -> –ü–æ–∫–∞–∑—É—î–º–æ –¥–∞—Ç–∏
@dp.message(StateFilter(Form.booking_name))
async def booking_name_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è
    try:
        available_dates = get_available_dates()
        if not available_dates:
            await message.answer("–ù–∞ –∂–∞–ª—å, –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            await state.clear()
            return

        keyboard = get_dates_keyboard(available_dates)
        await message.answer("–î—è–∫—É—é! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Å—É:\n(–¥—ñ–π—Å–Ω—ñ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ 7 –¥–Ω—ñ–≤)\n–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:", reply_markup=keyboard)
        await state.set_state(Form.date)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç (–ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ): {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –¥–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É (–≥—ñ–ª–∫–∞ 1) -> –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ —Å—Ç–∞—Ä—Ç
@dp.message(StateFilter(Form.phone_number))
async def get_phone_number_handler(message: Message, state: FSMContext):
    contact_info = message.text
    user_id = message.from_user.id
    telegram_username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {user_id}") # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∑—ñ —Å—Ç–∞–Ω—É

    try:
        client = get_gspread_client()
        sheet = client.open(SPREADSHEET_NAME).worksheet(REQUESTS_WORKSHEET_NAME) # –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É –∞—Ä–∫—É—à–∞!
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        print(f"DEBUG: Saving contact info for {user_name}...", file=sys.stderr)
        # –ü–æ—Ä—è–¥–æ–∫: –Ü–º‚Äô—è | –ö–æ–Ω—Ç–∞–∫—Ç | –ü–∏—Ç–∞–Ω–Ω—è | Telegram ID | –î–∞—Ç–∞ | –ß–∞—Å | –ß–∞—Å –ó–∞–ø–∏—Å—É
        sheet.append_row([
            user_name, contact_info, "–ó–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫",
            telegram_username, "", "", timestamp
        ])
        print("DEBUG: Contact info saved.", file=sys.stderr)
        await message.answer(f"–î—è–∫—É—é, {user_name}! –í–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ: '{contact_info}' –æ—Ç—Ä–∏–º–∞–Ω—ñ. –Ø –∑–≤'—è–∂—É—Å—è –∑ –≤–∞–º–∏.")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ —Å—Ç–∞—Ä—Ç
        await cmd_start(message, state)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –≤ Google Sheets: {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear() # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∑ –¥–∞—Ç–æ—é (–≥—ñ–ª–∫–∞ 2) -> –ü–æ–∫–∞–∑—É—î–º–æ —á–∞—Å
@dp.callback_query(StateFilter(Form.date), F.data.startswith("date_"))
async def get_date_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    selected_date = callback.data.split("_")[1]
    try:
        available_dates = get_available_dates()
        if selected_date in available_dates and available_dates[selected_date]:
            available_times = available_dates[selected_date]
            await state.update_data(date=selected_date)
            await state.set_state(Form.time)
            keyboard = get_times_keyboard(available_times)
            await callback.message.edit_text( # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                f"–î–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏ –Ω–∞ {selected_date}:\n–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text("–ù–∞ –∂–∞–ª—å, —Ü—è –¥–∞—Ç–∞ –∞–±–æ —á–∞—Å –Ω–∞ –Ω–µ—ó –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ /start.")
            await state.clear()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è/–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∞—Ç–∏ (–∑ callback): {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∑ —á–∞—Å–æ–º (–≥—ñ–ª–∫–∞ 2) -> –ë—Ä–æ–Ω—é—î–º–æ, –ø–∏—Ç–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
@dp.callback_query(StateFilter(Form.time), F.data.startswith("time_"))
async def get_time_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    selected_time = callback.data.split("_")[1]
    user_data = await state.get_data()
    selected_date = user_data.get("date")

    if not selected_date:
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É (–¥–∞—Ç–∞). –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()
        return

    try:
        current_available_dates = get_available_dates()
        if selected_date in current_available_dates and selected_time in current_available_dates[selected_date]:
            try:
                update_status(selected_date, selected_time, STATUS_BOOKED)
                await state.update_data(time=selected_time)
                await state.set_state(Form.question)
                await callback.message.edit_text( # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    f"–ß–∞—Å {selected_date} {selected_time} —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ!\n–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –º–µ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:"
                )
            except Exception as e_update:
                print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Google Sheets –ø—ñ–¥ —á–∞—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: {type(e_update).__name__} - {e_update}", file=sys.stderr)
                await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —á–∞—Å—É. –ú–æ–∂–ª–∏–≤–æ, —Ö—Ç–æ—Å—å –≤—Å—Ç–∏–≥ —Ä–∞–Ω—ñ—à–µ. –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
                await state.clear()
        else:
            await callback.message.edit_text(f"–ù–∞ –∂–∞–ª—å, —á–∞—Å {selected_time} –Ω–∞ {selected_date} —â–æ–π–Ω–æ –∑–∞–π–Ω—è–ª–∏. –ü–æ—á–Ω—ñ—Ç—å –∑ /start.")
            await state.clear()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è/–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Å—É (–∑ callback): {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ (–≥—ñ–ª–∫–∞ 2) -> –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ —Å—Ç–∞—Ä—Ç
@dp.message(StateFilter(Form.question))
async def get_question_handler(message: Message, state: FSMContext):
    question = message.text
    user_data = await state.get_data()
    # –ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
    user_name = user_data.get("name", f"User {message.from_user.id}")
    selected_date = user_data.get("date")
    selected_time = user_data.get("time")
    user_id = message.from_user.id
    telegram_username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"
    contact_info = telegram_username # –ö–æ–Ω—Ç–∞–∫—Ç - –¢–ì, –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å—É

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—Å—ñ –¥–∞–Ω—ñ —î
    if not selected_date or not selected_time:
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç—É –∞–±–æ —á–∞—Å). –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É: /start")
        await state.clear()
        return

    try:
        # --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets ---
        client = get_gspread_client()
        sheet = client.open(SPREADSHEET_NAME).worksheet(REQUESTS_WORKSHEET_NAME) # –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É –∞—Ä–∫—É—à–∞!
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        print(f"DEBUG: Saving appointment for {user_name}...", file=sys.stderr)
        # –ü–æ—Ä—è–¥–æ–∫: –Ü–º‚Äô—è | –ö–æ–Ω—Ç–∞–∫—Ç | –ü–∏—Ç–∞–Ω–Ω—è | Telegram ID | –î–∞—Ç–∞ | –ß–∞—Å | –ß–∞—Å –ó–∞–ø–∏—Å—É
        sheet.append_row([
            user_name, contact_info, question, str(user_id),
            selected_date, selected_time, timestamp
        ])
        print("DEBUG: Appointment saved to –ó–∞—è–≤–∫–∏ sheet.", file=sys.stderr)

        # --- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 1: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ---
        await message.answer(f"–î—è–∫—É—é, {user_name}! –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é ({selected_date} {selected_time}) –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")

        # --- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 2: –î–µ—Ç–∞–ª—ñ —Ç–∞ –ü–æ—Ä—è–¥–æ–∫ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó ---
        # !!! –í–∞–∂–ª–∏–≤–æ: –ó–∞–º—ñ–Ω—ñ—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ !!!
        lawyer_contact_for_booking_questions = "–í–ê–®_–¢–ï–õ–ï–§–û–ù_–ê–ë–û_EMAIL" # –ó–∞–º—ñ–Ω—ñ—Ç—å!
        payment_details_text = '–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤–∞–º –¥–æ–¥–∞—Ç–∫–æ–≤–æ. –û–ø–ª–∞—Ç—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.' # –ó–∞–º—ñ–Ω—ñ—Ç—å –∞–±–æ —É—Ç–æ—á–Ω—ñ—Ç—å!

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è, –∞–ª–µ –ó–ê–ú–Ü–ù–Æ–Ñ–ú–û <br> –Ω–∞ \n
        details_text_html = (
            f"üóìÔ∏è <b>–î–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É:</b> {selected_date} –æ {selected_time}.\n\n"  # –ó–∞–º—ñ—Å—Ç—å <br>
            f"<b>–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:</b>\n\n"  # –ó–∞–º—ñ—Å—Ç—å <br>
            f"1Ô∏è‚É£ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–µ–∑–∞–¥–æ–≤–≥–æ –¥–æ –ø–æ—á–∞—Ç–∫—É –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º (<code>{contact_info}</code>), —â–æ–± —É–∑–≥–æ–¥–∏—Ç–∏ –∑—Ä—É—á–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (Zoom, Google Meet, Teams, Viber, WhatsApp, Telegram —Ç–æ—â–æ) —Ç–∞ –Ω–∞–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n\n"  # –ó–∞–º—ñ—Å—Ç—å <br>
            f"2Ô∏è‚É£ <b>–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞:</b> –Ø–∫—â–æ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –ø—ñ–¥–≥–æ—Ç—É–π—Ç–µ —ó—Ö –∫–æ–ø—ñ—ó/—Ñ–æ—Ç–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–±–µ–∑–ø–µ—á—Ç–µ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–∞ —Ç–∏—Ö–µ –º—ñ—Å—Ü–µ.\n\n"  # –ó–∞–º—ñ—Å—Ç—å <br>
            f"3Ô∏è‚É£ <b>–û–ø–ª–∞—Ç–∞:</b> –í–∞—Ä—Ç—ñ—Å—Ç—å - <b>1000 –≥—Ä–Ω/–≥–æ–¥</b>. {payment_details_text}\n\n"  # –ó–∞–º—ñ—Å—Ç—å <br>
            f"4Ô∏è‚É£ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è:</b> –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ñ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è. –ê–¥–≤–æ–∫–∞—Ç –ú–µ—Ä–∫–æ–≤–∏—á –ë–æ–≥–¥–∞–Ω –Ω–∞–¥–∞—Å—Ç—å –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ä–æ–∑'—è—Å–Ω–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.\n\n"  # –ó–∞–º—ñ—Å—Ç—å <br>
            f"5Ô∏è‚É£ <b>–ó–≤'—è–∑–æ–∫:</b> –ó —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å —â–æ–¥–æ –∑–∞–ø–∏—Å—É <i>–¥–æ</i> –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å: {lawyer_contact_for_booking_questions}.\n\n"  # –ó–∞–º—ñ—Å—Ç—å <br>
            f"–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∑–≤'—è–∑–æ–∫ –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏!"
        )
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ HTML —Ä–æ–∑–º—ñ—Ç–∫–æ—é, parse_mode –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è HTML
        print("DEBUG: Attempting to send details message...", file=sys.stderr)
        await message.answer(details_text_html, parse_mode="HTML")
        print("DEBUG: Details message sent.", file=sys.stderr)

        # --- –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ —Å—Ç–∞—Ä—Ç ---
        print("DEBUG: Returning to start after successful booking and sending details.", file=sys.stderr)
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫, —è–∫–∏–π –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞–Ω —ñ –ø–æ—á–Ω–µ –¥—ñ–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ
        await cmd_start(message, state)

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –≤ Google Sheets: {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        # –£ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, —Ç–∞–∫–æ–∂ –æ—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
        await state.clear()

    # state.clear() —Ç—É—Ç –≤–∂–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, —è–∫—â–æ cmd_start –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–æ