# /root/telegram-schedule-bot/bot/handlers.py
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ö–µ–Ω–¥–ª–µ—Ä—ã) –¥–ª—è –∫–æ–º–∞–Ω–¥, —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–ª–±–µ–∫–æ–≤.
# –ò—Å–ø–æ–ª—å–∑—É–µ–º Aiogram Router –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.

import os
import sys
from datetime import datetime
import pytz 

from aiogram import Router, types, F
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from .bot import bot, ADMIN_CHAT_ID 
from .states import Form
from .keyboards import (
    get_service_choice_keyboard,
    get_dates_keyboard,
    get_times_keyboard,
    get_share_contact_keyboard,
    get_back_to_main_menu_keyboard,
    get_messenger_choice_keyboard, 
    MESSENGER_OPTIONS,
    get_user_bookings_keyboard,      # <<< –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢
    get_confirm_cancellation_keyboard # <<< –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢
)
from .google_sheets import (
    get_available_dates,
    update_status,
    get_client_provided_name,
    save_or_update_client_name,
    get_gspread_client,  
    SPREADSHEET_NAME,  
    REQUESTS_WORKSHEET_NAME,
    STATUS_BOOKED,
    STATUS_FREE, # <<< –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢
    STATUS_CANCELLED_BY_USER_IN_SCHEDULE, # <<< –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢
    get_user_bookings,           # <<< –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢
    mark_booking_as_cancelled,   # <<< –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢
    KYIV_TZ,
    # DATE_FORMAT_IN_SHEET # –£–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ keyboards.py
)
from .utils import (
    notify_admin_new_contact, 
    notify_admin_new_booking_extended,
    notify_admin_cancellation # <<< –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢
)

if 'KYIV_TZ' not in globals(): # type: ignore
    KYIV_TZ = pytz.timezone('Europe/Kiev')

main_router = Router(name="main_handlers_router")


async def show_service_choice_menu(target_message_or_callback: types.TelegramObject, state: FSMContext,
                                   user_name: str = None):
    await state.set_state(Form.service_choice)
    keyboard = get_service_choice_keyboard()
    greeting = f"–ü—Ä–∏–≤—ñ—Ç, {user_name}! üëã\n" if user_name else "–ü—Ä–∏–≤—ñ—Ç! üëã\n"
    text = f"{greeting}–Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?"

    if isinstance(target_message_or_callback, CallbackQuery):
        try:
            await target_message_or_callback.message.edit_text(text, reply_markup=keyboard)
        except Exception as e_edit:
            print(f"DEBUG [handlers.py]: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (show_service_choice_menu), –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ. –û—à–∏–±–∫–∞: {e_edit}", file=sys.stderr)
            await target_message_or_callback.message.answer(text, reply_markup=keyboard)
    elif isinstance(target_message_or_callback, Message):
        await target_message_or_callback.answer(text, reply_markup=keyboard)


@main_router.message(CommandStart())
async def cmd_start_handler(message: Message, state: FSMContext, remembered_name: str = None):
    await state.clear()
    user_id = message.from_user.id
    stored_name = None

    if not remembered_name:
        try:
            stored_name = get_client_provided_name(user_id) #
        except Exception as e:
            print(f"–û–®–ò–ë–ö–ê [handlers.py]: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞: {type(e).__name__} - {e}", file=sys.stderr)

    display_name = remembered_name or stored_name
    if display_name:
        await state.update_data(name=display_name)

    await show_service_choice_menu(message, state, display_name)


@main_router.message(Command("rename"))
async def cmd_rename_handler(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user_fsm_data = await state.get_data()
    current_name = user_fsm_data.get("name")

    if not current_name:
        try:
            current_name_from_sheet = get_client_provided_name(user_id) #
            if current_name_from_sheet:
                current_name = current_name_from_sheet
        except Exception as e:
            print(f"DEBUG [handlers.py]: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è /rename user {user_id}: {e}", file=sys.stderr)

    if current_name:
        await state.update_data(current_name_for_rename=current_name)
        await message.answer(
            f"–í–∞—à–µ –ø–æ—Ç–æ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–µ —ñ–º'—è: <b>{current_name}</b>.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:",
            parse_mode="HTML"
        )
        await state.set_state(Form.renaming_name) #
    else:
        await message.answer(
            "–ó–¥–∞—î—Ç—å—Å—è, –¥–ª—è –≤–∞—Å —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —ñ–º'—è. –í–∏ –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ, "
            "—Å–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏—Å—å —Ñ—É–Ω–∫—Ü—ñ—î—é –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∞–±–æ –∑–∞–ª–∏—à–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É."
        )
        await message.answer("–ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?", reply_markup=get_back_to_main_menu_keyboard()) #


@main_router.message(StateFilter(Form.renaming_name), F.text) #
async def process_new_name_handler(message: Message, state: FSMContext):
    new_name = message.text.strip()
    user_id = message.from_user.id
    tg_username = f"@{message.from_user.username}" if message.from_user.username else ""

    if not new_name:
        await message.answer("–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è:")
        return

    try:
        save_or_update_client_name(user_id, tg_username, new_name) #
        await state.update_data(name=new_name)
        await message.answer(f"–í–∞—à–µ —ñ–º'—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: <b>{new_name}</b>.", parse_mode="HTML")
        print(f"DEBUG [handlers.py]: –Ü–º'—è –¥–ª—è user {user_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_name}' —á–µ—Ä–µ–∑ /rename.", file=sys.stderr)
        await message.answer("–ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?", reply_markup=get_back_to_main_menu_keyboard()) #
        await state.clear()
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è user {user_id} —á–µ—Ä–µ–∑ /rename: {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await message.answer("–ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?", reply_markup=get_back_to_main_menu_keyboard()) #
        await state.clear()


@main_router.message(StateFilter(Form.renaming_name)) #
async def process_new_name_invalid_input_handler(message: Message, state: FSMContext):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –Ω–æ–≤–µ —ñ–º'—è —Ç–µ–∫—Å—Ç–æ–º. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–º—ñ–Ω—É —ñ–º–µ–Ω—ñ, –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start.")


@main_router.callback_query(StateFilter(Form.service_choice)) #
async def service_choice_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    choice_data = callback.data
    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    user_name = user_fsm_data.get("name")

    if not user_name:
        try:
            print(f"DEBUG [handlers.py]: –Ü–º'—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ FSM –¥–ª—è user {user_id}. –ó–∞–ø–∏—Ç –¥–æ get_client_provided_name...", file=sys.stderr)
            user_name_from_sheet = get_client_provided_name(user_id) #
            if user_name_from_sheet:
                user_name = user_name_from_sheet
                await state.update_data(name=user_name)
                print(f"DEBUG [handlers.py]: –Ü–º'—è '{user_name}' –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è user {user_id} —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ FSM.", file=sys.stderr)
            else:
                print(f"DEBUG [handlers.py]: –Ü–º'—è –¥–ª—è user {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω—ñ –≤ FSM, –Ω—ñ –≤ Sheets.", file=sys.stderr)
        except Exception as e:
            print(f"–û–®–ò–ë–ö–ê [handlers.py]: –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–º–µ–Ω—ñ –¥–ª—è user {user_id} –≤ service_choice: {e}", file=sys.stderr)

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e_edit_markup:
        print(f"DEBUG [handlers.py]: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤ service_choice: {e_edit_markup}", file=sys.stderr)

    if choice_data == "ask_contact":
        if user_name:
            await state.set_state(Form.phone_number) #
            keyboard = get_share_contact_keyboard() #
            await callback.message.answer(
                f"–î—è–∫—É—é, {user_name}! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, "
                "–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É) –≤—Ä—É—á–Ω—É:",
                reply_markup=keyboard
            )
        else:
            await state.set_state(Form.callback_name) #
            await callback.message.answer("–î–æ–±—Ä–µ, —è –∑–∞–ø–∏—à—É –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

    elif choice_data == "book_consultation":
        if user_name:
            await show_available_dates_for_booking(callback, state, user_name)
        else:
            await state.set_state(Form.booking_name) #
            await callback.message.answer("–î–æ–±—Ä–µ, –∑–∞–ø–∏—à–µ–º–æ –≤–∞—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
    
    elif choice_data == "cancel_my_booking_start": # –ù–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        if not user_name: # –Ø–∫—â–æ —ñ–º'—è –Ω–µ–≤—ñ–¥–æ–º–µ, –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ –π–æ–≥–æ —Å–ø–æ—á–∞—Ç–∫—É
            await state.set_state(Form.booking_name) # –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç–æ–π —Å–∞–º–∏–π —Å—Ç–∞–Ω –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
            await state.update_data(next_action_after_name="cancel_booking") # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, —â–æ —Ä–æ–±–∏—Ç–∏ –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
            await callback.message.edit_text(
                "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –≤–∞—à–µ —ñ–º'—è, –ø—ñ–¥ —è–∫–∏–º –≤–∏ —Ä–æ–±–∏–ª–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=None
            )
            return

        # –Ü–º'—è –≤—ñ–¥–æ–º–µ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑—ñ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è–º
        await process_cancellation_request(callback, state, user_name, user_id)


    else:
        await callback.message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()


@main_router.message(StateFilter(Form.callback_name)) #
async def callback_name_handler(message: Message, state: FSMContext):
    user_name_provided = message.text
    await state.update_data(name=user_name_provided)
    user_id = message.from_user.id
    tg_username = f"@{message.from_user.username}" if message.from_user.username else ""

    try:
        save_or_update_client_name(user_id, tg_username, user_name_provided) #
        print(f"DEBUG [handlers.py]: –Ü–º'—è '{user_name_provided}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è user {user_id} (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫).", file=sys.stderr)
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ (–≥—ñ–ª–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É): {type(e).__name__} - {e}", file=sys.stderr)

    await state.set_state(Form.phone_number) #
    keyboard = get_share_contact_keyboard() #
    await message.answer(
        f"–î—è–∫—É—é, {user_name_provided}! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, "
        "–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É) –≤—Ä—É—á–Ω—É:",
        reply_markup=keyboard
    )


@main_router.message(StateFilter(Form.phone_number), F.contact) #
async def contact_shared_handler(message: Message, state: FSMContext):
    contact_info = message.contact.phone_number
    user_id = message.from_user.id
    telegram_username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {user_id}")
    await state.update_data(contact=contact_info)

    try:
        timestamp = datetime.now(KYIV_TZ).strftime("%d.%m.%Y %H:%M:%S")
        g_client = get_gspread_client() #
        sheet = g_client.open(SPREADSHEET_NAME).worksheet(REQUESTS_WORKSHEET_NAME) #
        print(f"DEBUG [handlers.py]: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SHARED –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è {user_name}...", file=sys.stderr)
        sheet.append_row([
            user_name, contact_info, "–ó–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ (–∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—à–∞—Ä–µ–Ω–æ)",
            telegram_username, "", "", timestamp
        ])
        print("DEBUG [handlers.py]: SHARED –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", file=sys.stderr)
        await notify_admin_new_contact(bot, ADMIN_CHAT_ID, user_name, contact_info, telegram_username, user_id, timestamp, "–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ—à–∞—Ä–µ–Ω–æ") #
        await message.answer(f"–î—è–∫—É—é, {user_name}! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {contact_info} –æ—Ç—Ä–∏–º–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await message.answer("–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –ø—Ä–∏–π–Ω—è—Ç–æ. –ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?", reply_markup=get_back_to_main_menu_keyboard()) #
        await state.clear()
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SHARED –∫–æ–Ω—Ç–∞–∫—Ç–∞: {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö...", reply_markup=ReplyKeyboardRemove())
        await state.clear()


@main_router.message(StateFilter(Form.phone_number), F.text) #
async def get_phone_number_text_handler(message: Message, state: FSMContext):
    contact_info = message.text
    user_id = message.from_user.id
    telegram_username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {user_id}")
    await state.update_data(contact=contact_info)

    try:
        g_client = get_gspread_client() #
        sheet = g_client.open(SPREADSHEET_NAME).worksheet(REQUESTS_WORKSHEET_NAME) #
        timestamp = datetime.now(KYIV_TZ).strftime("%d.%m.%Y %H:%M:%S")
        print(f"DEBUG [handlers.py]: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ TYPED –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è {user_name}...", file=sys.stderr)
        sheet.append_row([
            user_name, contact_info, "–ó–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ (–∫–æ–Ω—Ç–∞–∫—Ç –≤–≤–µ–¥–µ–Ω–æ)",
            telegram_username, "", "", timestamp
        ])
        print("DEBUG [handlers.py]: TYPED –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", file=sys.stderr)
        await notify_admin_new_contact(bot, ADMIN_CHAT_ID, user_name, contact_info, telegram_username, user_id, timestamp, "–ö–æ–Ω—Ç–∞–∫—Ç –≤–≤–µ–¥–µ–Ω–æ") #
        await message.answer(f"–î—è–∫—É—é, {user_name}! –í–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ: '{contact_info}' –æ—Ç—Ä–∏–º–∞–Ω—ñ. –Ø –∑–≤'—è–∂—É—Å—è –∑ –≤–∞–º–∏.", reply_markup=ReplyKeyboardRemove())
        await message.answer("–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –ø—Ä–∏–π–Ω—è—Ç–æ. –ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?", reply_markup=get_back_to_main_menu_keyboard()) #
        await state.clear()
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è TYPED –∫–æ–Ω—Ç–∞–∫—Ç–∞: {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö...", reply_markup=ReplyKeyboardRemove())
        await state.clear()


# --- –í–µ—Ç–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" ---
@main_router.message(StateFilter(Form.booking_name)) #
async def booking_name_handler(message: Message, state: FSMContext):
    user_name_provided = message.text.strip()
    await state.update_data(name=user_name_provided)
    user_id = message.from_user.id
    tg_username = f"@{message.from_user.username}" if message.from_user.username else ""

    try:
        save_or_update_client_name(user_id, tg_username, user_name_provided) #
        print(f"DEBUG [handlers.py]: –Ü–º'—è '{user_name_provided}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è user {user_id}.", file=sys.stderr)
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ (–≥—ñ–ª–∫–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è): {type(e).__name__} - {e}", file=sys.stderr)
    
    user_fsm_data = await state.get_data()
    next_action = user_fsm_data.get("next_action_after_name")

    if next_action == "cancel_booking":
        await state.update_data(next_action_after_name=None) # –û—á–∏—â–∞—î–º–æ, —â–æ–± –Ω–µ –≤–ø–ª–∏–≤–∞–ª–æ –Ω–∞ —ñ–Ω—à—ñ –ø–æ—Ç–æ–∫–∏
        # –ó–∞–º—ñ—Å—Ç—å callback –ø–µ—Ä–µ–¥–∞—î–º–æ message, –æ—Å–∫—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ —ñ–º'—è —á–µ—Ä–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await process_cancellation_request(message, state, user_name_provided, user_id)
    else: # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–æ—Ç—ñ–∫ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
        await show_available_dates_for_booking(message, state, user_name_provided)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" ---
@main_router.callback_query(F.data == "back_to_service_choice_from_date", StateFilter(Form.date)) #
async def back_to_service_choice_from_date_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_data = await state.get_data()
    user_name = user_data.get("name")
    await show_service_choice_menu(callback, state, user_name)


@main_router.callback_query(F.data == "back_to_date_selection", StateFilter(Form.time)) #
async def back_to_date_selection_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_data = await state.get_data()
    user_name = user_data.get("name")
    try:
        available_dates = get_available_dates() #
        if not available_dates:
            await callback.message.edit_text("–ù–∞ –∂–∞–ª—å, –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç. –ü–æ–≤–µ—Ä—Ç–∞—é –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.")
            await show_service_choice_menu(callback, state, user_name)
            return
        keyboard = get_dates_keyboard(available_dates) #
        await callback.message.edit_text(
            f"{user_name}, –æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Å—É (–Ω–∞ 7 –¥–Ω—ñ–≤):\n–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:",
            reply_markup=keyboard
        )
        await state.set_state(Form.date) #
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –≤ back_to_date_selection: {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤–µ—Ä—Ç–∞—é –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.")
        await show_service_choice_menu(callback, state, user_name)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏, –≤–æ–ø—Ä–æ—Å–∞ ---
@main_router.callback_query(StateFilter(Form.date), F.data.startswith("date_")) #
async def get_date_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    selected_date = callback.data.split("date_")[1]
    try:
        available_dates = get_available_dates() #
        if selected_date in available_dates and available_dates[selected_date]:
            available_times = available_dates[selected_date]
            await state.update_data(date=selected_date)
            await state.set_state(Form.time) #
            keyboard = get_times_keyboard(available_times) #
            await callback.message.edit_text(
                f"–î–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏ –Ω–∞ {selected_date}:\n–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
                reply_markup=keyboard
            )
        else:
            keyboard = get_dates_keyboard(available_dates) #
            await callback.message.edit_text(
                "–ù–∞ –∂–∞–ª—å, —Ü—è –¥–∞—Ç–∞ –∞–±–æ —á–∞—Å –Ω–∞ –Ω–µ—ó –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥'.",
                reply_markup=keyboard
            )
            await state.set_state(Form.date) #
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –ø–æ–ª—É—á–µ–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã (callback): {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()


@main_router.callback_query(StateFilter(Form.time), F.data.startswith("time_")) #
async def get_time_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    selected_time = callback.data.split("time_")[1]
    user_data = await state.get_data()
    selected_date = user_data.get("date")
    user_name = user_data.get("name", f"User {callback.from_user.id}")

    if not selected_date:
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É). –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()
        return
    try:
        # –ü—Ä–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—ñ, –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å - '–≤—ñ–ª—å–Ω–æ'
        booking_successful = update_status(selected_date, selected_time, STATUS_BOOKED, expected_current_status=STATUS_FREE) #
        if booking_successful:
            await state.update_data(time=selected_time)
            await state.set_state(Form.question) #
            await callback.message.edit_text(
                f"–ß–∞—Å {selected_date} {selected_time} —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ!\n–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –º–µ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:"
            )
        else:
            current_available_dates = get_available_dates() #
            if selected_date in current_available_dates and current_available_dates[selected_date]:
                keyboard = get_times_keyboard(current_available_dates[selected_date]) #
                await callback.message.edit_text(
                    f"–ù–∞ –∂–∞–ª—å, —á–∞—Å {selected_time} –Ω–∞ {selected_date} —â–æ–π–Ω–æ –∑–∞–π–Ω—è–ª–∏ –∞–±–æ —Å—Ç–∞–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–º. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π:",
                    reply_markup=keyboard
                )
                await state.set_state(Form.time) #
            else: # –Ø–∫—â–æ –≤—Å—è –¥–∞—Ç–∞ —Å—Ç–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—é
                await callback.message.edit_text(
                    f"–ù–∞ –∂–∞–ª—å, –Ω–∞ {selected_date} –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –∞–±–æ –¥–∞—Ç–∞ —Å—Ç–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É –∞–±–æ –ø–æ—á–Ω—ñ—Ç—å –∑ /start.",
                    reply_markup=get_dates_keyboard(current_available_dates) if current_available_dates else get_back_to_main_menu_keyboard() #
                )
                await state.set_state(Form.date if current_available_dates else Form.service_choice) #
                if not current_available_dates: await show_service_choice_menu(callback, state, user_name)


    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –ø—ñ–¥ —á–∞—Å —Å–ø—Ä–æ–±–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —á–∞—Å: {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()


@main_router.message(StateFilter(Form.question)) #
async def get_question_handler(message: Message, state: FSMContext):
    question_text = message.text
    await state.update_data(question=question_text)
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {message.from_user.id}")
    print(f"DEBUG [handlers.py]: –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {user_name} –æ—Ç—Ä–∏–º–∞–Ω–æ: '{question_text}'. –ó–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É...", file=sys.stderr)
    await state.set_state(Form.booking_phone_number) #
    keyboard = get_share_contact_keyboard() #
    await message.answer(
        f"–î—è–∫—É—é, –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ: \"{question_text}\".\n\n"
        f"–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º <b>–Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>. –í—ñ–Ω –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –∑–≤'—è–∑–∫—É —â–æ–¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —Ç–∞ —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@main_router.message(StateFilter(Form.booking_phone_number), F.contact) #
async def booking_phone_shared_handler(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(booking_phone_number=phone_number)
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {message.from_user.id}")
    print(f"DEBUG [handlers.py]: –ù–æ–º–µ—Ä —Ç–µ–ª. '{phone_number}' (–ø–æ—à–∏—Ä–µ–Ω–∏–π) –¥–ª—è –∫–æ–Ω—Å. –≤—ñ–¥ {user_name} –æ—Ç—Ä–∏–º–∞–Ω–æ. –ó–∞–ø–∏—Ç –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞...", file=sys.stderr)
    await state.set_state(Form.messenger_choice) #
    keyboard = get_messenger_choice_keyboard() #
    await message.answer(
        f"–î—è–∫—É—é! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: <code>{phone_number}</code>.\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π –º–µ—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è –≤—ñ–¥–µ–æ–¥–∑–≤—ñ–Ω–∫–∞:",
        reply_markup=keyboard, # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∂–µ one_time_keyboard, ReplyKeyboardRemove –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —è–≤–Ω–æ –¥–ª—è –Ω–µ—ó
        parse_mode="HTML"
    )


@main_router.message(StateFilter(Form.booking_phone_number), F.text) #
async def booking_phone_text_handler(message: Message, state: FSMContext):
    phone_number = message.text
    await state.update_data(booking_phone_number=phone_number)
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {message.from_user.id}")
    print(f"DEBUG [handlers.py]: –ù–æ–º–µ—Ä —Ç–µ–ª. '{phone_number}' (–≤–≤–µ–¥–µ–Ω–∏–π) –¥–ª—è –∫–æ–Ω—Å. –≤—ñ–¥ {user_name} –æ—Ç—Ä–∏–º–∞–Ω–æ. –ó–∞–ø–∏—Ç –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞...", file=sys.stderr)
    await state.set_state(Form.messenger_choice) #
    keyboard = get_messenger_choice_keyboard() #
    await message.answer(
        f"–î—è–∫—É—é! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: <code>{phone_number}</code>.\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π –º–µ—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è –≤—ñ–¥–µ–æ–¥–∑–≤—ñ–Ω–∫–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@main_router.callback_query(F.data == "back_to_booking_phone", StateFilter(Form.messenger_choice)) #
async def back_to_booking_phone_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ –≤–∏–±–æ—Ä—É –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞."""
    await callback.answer()
    user_data = await state.get_data()
    question_text = user_data.get("question", "–≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è") # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    
    await state.set_state(Form.booking_phone_number) #
    keyboard = get_share_contact_keyboard() #
    await callback.message.edit_text( # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        f"–î–æ–±—Ä–µ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ: \"{question_text}\".\n\n"
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º <b>–Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>. \n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@main_router.callback_query(StateFilter(Form.messenger_choice), F.data.startswith("messenger_")) #
async def messenger_choice_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    chosen_messenger_key = callback.data.split("messenger_")[1]
    chosen_messenger_text = MESSENGER_OPTIONS.get(chosen_messenger_key, chosen_messenger_key.capitalize()) #
    await state.update_data(preferred_messenger=chosen_messenger_text)
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {callback.from_user.id}")
    selected_date = user_data.get("date")
    selected_time = user_data.get("time")
    question = user_data.get("question")
    booking_phone_number = user_data.get("booking_phone_number")
    user_id = callback.from_user.id
    telegram_username = f"@{callback.from_user.username}" if callback.from_user.username else f"ID:{user_id}"

    if not all([selected_date, selected_time, question, booking_phone_number, chosen_messenger_text]):
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É (–Ω–µ –≤—Å—ñ –¥–∞–Ω—ñ –∑—ñ–±—Ä–∞–Ω–æ). –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()
        return

    try:
        g_client = get_gspread_client() #
        sheet = g_client.open(SPREADSHEET_NAME).worksheet(REQUESTS_WORKSHEET_NAME) #
        timestamp = datetime.now(KYIV_TZ).strftime("%d.%m.%Y %H:%M:%S")
        print(f"DEBUG [handlers.py]: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è {user_name} –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —ñ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–æ–º...", file=sys.stderr)
        # –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: –Ü–º'—è, –¢–µ–ª–µ–≥—Ä–∞–º-–∫–æ–Ω—Ç–∞–∫—Ç (UserName/ID), –ü–∏—Ç–∞–Ω–Ω—è, User ID (—á–∏—Å–ª–æ–≤–∏–π), –î–∞—Ç–∞, –ß–∞—Å, –ß–∞—Å –∑–∞–ø–∏—Å—É (timestamp), –¢–µ–ª–µ—Ñ–æ–Ω (–¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó), –ú–µ—Å–µ–Ω–¥–∂–µ—Ä, –°—Ç–∞—Ç—É—Å –ó–∞—è–≤–∫–∏
        # –î–æ–¥–∞—î–º–æ REQUEST_STATUS_COLUMN –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º "–ê–∫—Ç–∏–≤–Ω–∞"
        # sheet.append_row([
        #     user_name, telegram_username, question, str(user_id),
        #     selected_date, selected_time, timestamp,
        #     booking_phone_number, chosen_messenger_text, "–ê–∫—Ç–∏–≤–Ω–∞" # –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
        # ])
        sheet.append_row([
            user_name,            # –Ü–º‚Äô—è
            telegram_username,    # –ö–æ–Ω—Ç–∞–∫—Ç (if this is what you mean by '–ö–æ–Ω—Ç–∞–∫—Ç' or if '–ö–æ–Ω—Ç–∞–∫—Ç' is separate)
            question,             # –ü–∏—Ç–∞–Ω–Ω—è
            str(user_id),         # Telegram ID
            selected_date,        # –î–∞—Ç–∞
            selected_time,        # –ß–∞—Å
            timestamp,            # –ß–∞—Å –∑–∞–ø–∏—Å—É
            booking_phone_number, # –¢–µ–ª–µ—Ñ–æ–Ω (–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è)
            chosen_messenger_text,# –ú–µ—Å–µ–Ω–¥–∂–µ—Ä
            "–ê–∫—Ç–∏–≤–Ω–∞"             # –°—Ç–∞—Ç—É—Å –ó–∞—è–≤–∫–∏
        ])
        print("DEBUG [handlers.py]: –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ (–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —ñ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–æ–º, —Å—Ç–∞—Ç—É—Å '–ê–∫—Ç–∏–≤–Ω–∞').", file=sys.stderr)
        await notify_admin_new_booking_extended( bot, ADMIN_CHAT_ID, user_name, selected_date, selected_time, question, telegram_username, user_id, timestamp, booking_phone_number, chosen_messenger_text ) #
        await callback.message.edit_text(
            f"–î—è–∫—É—é, {user_name}! –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é ({selected_date} {selected_time}) –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
            f"<b>–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:</b> <code>{booking_phone_number}</code>\n"
            f"<b>–ë–∞–∂–∞–Ω–∏–π –º–µ—Å–µ–Ω–¥–∂–µ—Ä:</b> {chosen_messenger_text}",
            parse_mode="HTML"
        )
        lawyer_contact = os.getenv("LAWYER_CONTACT_DETAILS", "–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –∞–¥–≤–æ–∫–∞—Ç–∞ (—Ç–µ–ª/email)")
        payment_info = os.getenv("PAYMENT_DETAILS_TEXT", "—Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤–∞–º –¥–æ–¥–∞—Ç–∫–æ–≤–æ")
        details_html = (
            f"üóìÔ∏è <b>–î–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É:</b> {selected_date} –æ {selected_time}.\n\n"
            f"<b>–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:</b>\n\n"
            f"1Ô∏è‚É£ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º <code>{booking_phone_number}</code> (–±–∞–∂–∞–Ω–∏–π –º–µ—Å–µ–Ω–¥–∂–µ—Ä: {chosen_messenger_text}) –Ω–µ–∑–∞–¥–æ–≤–≥–æ –¥–æ –ø–æ—á–∞—Ç–∫—É, —â–æ–± —É–∑–≥–æ–¥–∏—Ç–∏ –∑—Ä—É—á–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (Zoom, Google Meet, Teams, Viber, WhatsApp, Telegram —Ç–æ—â–æ) —Ç–∞ –Ω–∞–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n\n"
            f"2Ô∏è‚É£ <b>–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞:</b> –Ø–∫—â–æ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –ø—ñ–¥–≥–æ—Ç—É–π—Ç–µ —ó—Ö –∫–æ–ø—ñ—ó/—Ñ–æ—Ç–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–±–µ–∑–ø–µ—á—Ç–µ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–∞ —Ç–∏—Ö–µ –º—ñ—Å—Ü–µ.\n\n"
            f"3Ô∏è‚É£ <b>–û–ø–ª–∞—Ç–∞:</b> –í–∞—Ä—Ç—ñ—Å—Ç—å - <b>1000 –≥—Ä–Ω/–≥–æ–¥</b>. {payment_info}\n\n"
            f"4Ô∏è‚É£ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è:</b> –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ñ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è. –ê–¥–≤–æ–∫–∞—Ç –ú–µ—Ä–∫–æ–≤–∏—á –ë–æ–≥–¥–∞–Ω –Ω–∞–¥–∞—Å—Ç—å –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ä–æ–∑'—è—Å–Ω–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.\n\n"
            f"5Ô∏è‚É£ <b>–ó–≤'—è–∑–æ–∫:</b> –ó —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å —â–æ–¥–æ –∑–∞–ø–∏—Å—É <i>–¥–æ</i> –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å: {lawyer_contact}.\n\n"
            f"–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∑–≤'—è–∑–æ–∫ –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏!"
        )
        await callback.message.answer(details_html, parse_mode="HTML")
        await callback.message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ. –ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?", reply_markup=get_back_to_main_menu_keyboard()) #
        await state.clear()
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó (–∑ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–æ–º): {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.answer("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É...")
        await callback.message.answer("–ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?", reply_markup=get_back_to_main_menu_keyboard()) #
        await state.clear()

# --- –ü–æ—Ç—ñ–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É ---
async def process_cancellation_request(target_object: types.TelegramObject, state: FSMContext, user_name: str, user_id: int):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: –æ—Ç—Ä–∏–º—É—î —Ç–∞ –ø–æ–∫–∞–∑—É—î –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    try:
        print(f"DEBUG [handlers.py]: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –∑–∞–ø–∏—Ç—É—î —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å...", file=sys.stderr)
        user_active_bookings = get_user_bookings(user_id) #

        message_target = target_object.message if isinstance(target_object, CallbackQuery) else target_object

        if not user_active_bookings:
            await message_target.answer( # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ answer, –±–æ edit_text –º–æ–∂–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —è–∫—â–æ —Ü–µ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
                f"–ù–∞ –∂–∞–ª—å, {user_name}, —É –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.",
                reply_markup=get_back_to_main_menu_keyboard() #
            )
            await state.set_state(Form.service_choice) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, –æ—á–∏—â—É—é—á–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω #
            return

        keyboard = get_user_bookings_keyboard(user_active_bookings) #
        text_to_send = f"{user_name}, –æ—Å—å –≤–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏. –û–±–µ—Ä—ñ—Ç—å —Ç–æ–π, —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏:"
        
        if isinstance(target_object, CallbackQuery):
             await target_object.message.edit_text(text_to_send, reply_markup=keyboard)
        else: # Message
             await target_object.answer(text_to_send, reply_markup=keyboard)

        await state.set_state(Form.list_bookings_for_cancellation) #

    except Exception as e:
        error_message = f"–û–®–ò–ë–ö–ê [handlers.py]: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è ({user_name}, {user_id}): {type(e).__name__} - {e}"
        print(error_message, file=sys.stderr)
        
        message_target = target_object.message if isinstance(target_object, CallbackQuery) else target_object
        await message_target.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_back_to_main_menu_keyboard() #
        )
        await state.clear() # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏


@main_router.callback_query(StateFilter(Form.list_bookings_for_cancellation), F.data.startswith("cancel_selected_booking_")) #
async def select_booking_for_cancellation_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."""
    await callback.answer()
    # callback.data –º–∞—î —Ñ–æ—Ä–º–∞—Ç "cancel_selected_booking_{row_index}_{date}_{time}"
    try:
        parts = callback.data.split("_")
        row_index_str = parts[3]
        date_str = parts[4]
        time_str = parts[5] # –ß–∞—Å –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ ":" —Ç–æ–º—É —Ç—Ä–µ–±–∞ –∑—ñ–±—Ä–∞—Ç–∏ –π–æ–≥–æ –Ω–∞–∑–∞–¥, —è–∫—â–æ –≤—ñ–Ω —Ä–æ–∑–±–∏–≤—Å—è
        if len(parts) > 6 : # –Ø–∫—â–æ —á–∞—Å —Ç–∏–ø—É "10:00" —Ä–æ–∑–±–∏–≤—Å—è –Ω–∞ "10" —ñ "00"
            time_str = f"{parts[5]}:{parts[6]}"


        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –æ–±—Ä–∞–Ω–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await state.update_data(
            cancellation_row_index=int(row_index_str),
            cancellation_date=date_str,
            cancellation_time=time_str
        )
        
        confirm_keyboard = get_confirm_cancellation_keyboard(f"{row_index_str}_{date_str}_{time_str}") #
        await callback.message.edit_text(
            f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å –Ω–∞ <b>{date_str} –æ {time_str}</b>?",
            reply_markup=confirm_keyboard,
            parse_mode="HTML"
        )
        await state.set_state(Form.confirm_cancellation) #

    except (IndexError, ValueError) as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {callback.data}. –ü–æ–º–∏–ª–∫–∞: {e}", file=sys.stderr)
        await callback.message.edit_text(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –≤–∏–±–æ—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_main_menu_keyboard() #
        )
        await state.clear()


@main_router.callback_query(StateFilter(Form.confirm_cancellation), F.data.startswith("confirm_cancellation_yes_")) #
async def confirm_cancellation_yes_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    await callback.answer("–°–∫–∞—Å–æ–≤—É—é –∑–∞–ø–∏—Å...")
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {callback.from_user.id}")
    user_id = callback.from_user.id
    telegram_username = f"@{callback.from_user.username}" if callback.from_user.username else f"ID:{user_id}"

    row_to_cancel_index = user_data.get("cancellation_row_index")
    date_to_cancel = user_data.get("cancellation_date")
    time_to_cancel = user_data.get("cancellation_time")

    if not all([row_to_cancel_index, date_to_cancel, time_to_cancel]):
        await callback.message.edit_text(
            "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω—ñ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É.",
            reply_markup=get_back_to_main_menu_keyboard() #
        )
        await state.clear()
        return

    try:
        # 1. –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤ "–ì—Ä–∞—Ñ—ñ–∫—É" –Ω–∞ "–≤—ñ–ª—å–Ω–æ (—Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º)"
        # –û—á—ñ–∫—É–≤–∞–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≤ "–ì—Ä–∞—Ñ—ñ–∫—É" - STATUS_BOOKED
        schedule_updated = update_status(
            date_to_cancel, 
            time_to_cancel, 
            STATUS_CANCELLED_BY_USER_IN_SCHEDULE, # –∞–±–æ –ø—Ä–æ—Å—Ç–æ STATUS_FREE, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω –æ–∫—Ä–µ–º–∏–π —Å—Ç–∞—Ç—É—Å
            expected_current_status=STATUS_BOOKED #
        )

        if not schedule_updated:
            # –ú–æ–∂–ª–∏–≤–æ, —Å–ª–æ—Ç –≤–∂–µ –±—É–≤ –∑–≤—ñ–ª—å–Ω–µ–Ω–∏–π –∞–±–æ –∑–º—ñ–Ω–µ–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            await callback.message.edit_text(
                f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è {date_to_cancel} {time_to_cancel}. –ú–æ–∂–ª–∏–≤–æ, —Ü–µ–π –∑–∞–ø–∏—Å –≤–∂–µ –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –∞–±–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. "
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_back_to_main_menu_keyboard() #
            )
            # –í—Å–µ –æ–¥–Ω–æ —Å–ø—Ä–æ–±—É—î–º–æ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –∑–∞—è–≤–∫—É —è–∫ —Å–∫–∞—Å–æ–≤–∞–Ω—É, —è–∫—â–æ –≤–æ–Ω–∞ —î
            mark_booking_as_cancelled(row_to_cancel_index, user_name, user_id) #
            await notify_admin_cancellation(bot, ADMIN_CHAT_ID, user_name, date_to_cancel, time_to_cancel, telegram_username, user_id, datetime.now(KYIV_TZ).strftime("%d.%m.%Y %H:%M:%S"), ) #
            await state.clear()
            return

        # 2. –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —è–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–µ –≤ –∞—Ä–∫—É—à—ñ "–ó–∞—è–≤–∫–∏"
        request_marked = mark_booking_as_cancelled(row_to_cancel_index, user_name, user_id) #
        if not request_marked:
            # –¶–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∞–ª–µ –∞–¥–º—ñ–Ω –º–∞—î –∑–Ω–∞—Ç–∏
            print(f"–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø [handlers.py]: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –∞—Ä–∫—É—à—ñ '–ó–∞—è–≤–∫–∏' –¥–ª—è —Ä—è–¥–∫–∞ {row_to_cancel_index}, –∞–ª–µ –≥—Ä–∞—Ñ—ñ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ.", file=sys.stderr)


        # 3. –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞
        await notify_admin_cancellation(
            bot_instance=bot,
            admin_chat_id=ADMIN_CHAT_ID,
            user_name=user_name,
            cancelled_date=date_to_cancel,
            cancelled_time=time_to_cancel,
            telegram_username=telegram_username,
            user_id=user_id,
            timestamp=datetime.now(KYIV_TZ).strftime("%d.%m.%Y %H:%M:%S")
        ) #

        await callback.message.edit_text(
            f"–í–∞—à –∑–∞–ø–∏—Å –Ω–∞ <b>{date_to_cancel} –æ {time_to_cancel}</b> —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=get_back_to_main_menu_keyboard(), #
            parse_mode="HTML"
        )
        await state.clear()

    except Exception as e:
        print(f"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê [handlers.py]: –ø—ñ–¥ —á–∞—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è {user_name} ({date_to_cancel} {time_to_cancel}): {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_back_to_main_menu_keyboard() #
        )
        await state.clear()


@main_router.callback_query(StateFilter(Form.confirm_cancellation), F.data == "confirm_cancellation_no") #
async def confirm_cancellation_no_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–º–æ–≤—É –≤—ñ–¥ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    await callback.answer()
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {callback.from_user.id}")
    user_id = callback.from_user.id
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É –π–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω—å, —è–∫—â–æ –≤—ñ–Ω —Ç–∞–º –±—É–≤,
    # –∞–±–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    # –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –≤–∂–µ –≤ Form.confirm_cancellation, –∑–Ω–∞—á–∏—Ç—å –ø–µ—Ä–µ–¥ —Ü–∏–º –±—É–≤ —Å–ø–∏—Å–æ–∫.
    # –¢–æ–º—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ process_cancellation_request –∑–Ω–æ–≤—É
    await callback.message.edit_text("–î–æ–±—Ä–µ, –≤–∞—à –∑–∞–ø–∏—Å –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º. –û–Ω–æ–≤–ª—é—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å—ñ–≤...")
    await process_cancellation_request(callback, state, user_name, user_id)
    # –ê–±–æ –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:
    # await callback.message.edit_text("–í–∞—à –∑–∞–ø–∏—Å –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º.", reply_markup=get_back_to_main_menu_keyboard())
    # await state.clear()


# --- –ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ ---
@main_router.message(StateFilter(None))
async def handle_unknown_text_messages(message: Message, state: FSMContext):
    await message.answer("–ù–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ –∫–æ–º–∞–Ω–¥–∏ /start, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó.")


@main_router.callback_query(F.data == "main_menu_start", StateFilter('*')) # –î–æ–∑–≤–æ–ª—è—î–º–æ –∑ –±—É–¥—å-—è–∫–æ–≥–æ —Å—Ç–∞–Ω—É
async def back_to_main_menu_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    user_id = callback.from_user.id
    display_name = None
    try:
        stored_name = get_client_provided_name(user_id) #
        if stored_name:
            display_name = stored_name
            await state.update_data(name=display_name)
    except Exception as e:
        print(f"DEBUG [handlers.py]: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º'—è –¥–ª—è user {user_id} –≤ main_menu_start: {e}", file=sys.stderr)
    await show_service_choice_menu(callback, state, user_name=display_name)


async def show_available_dates_for_booking(target: types.TelegramObject, state: FSMContext, user_name: str):
    message_to_edit_or_answer = None
    if isinstance(target, CallbackQuery):
        message_to_edit_or_answer = target.message
    elif isinstance(target, Message):
        message_to_edit_or_answer = target
    else:
        print("ERROR [handlers.py]: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø target –¥–ª—è show_available_dates_for_booking", file=sys.stderr)
        return

    try:
        print(f"DEBUG [handlers.py]: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç...", file=sys.stderr)
        available_dates = get_available_dates() #

        if not available_dates:
            no_dates_text = f"–ù–∞ –∂–∞–ª—å, {user_name}, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            # –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ edit_text –∞–±–æ answer –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É target
            if isinstance(target, CallbackQuery):
                await message_to_edit_or_answer.edit_text(no_dates_text, reply_markup=get_service_choice_keyboard()) #
                await state.set_state(Form.service_choice) #
            else: # Message
                await message_to_edit_or_answer.answer(no_dates_text)
                await show_service_choice_menu(message_to_edit_or_answer, state, user_name) # –¶–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é
            return

        keyboard = get_dates_keyboard(available_dates) #
        text_to_send = f"–î—è–∫—É—é, {user_name}! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Å—É (–Ω–∞ 7 –¥–Ω—ñ–≤):\n–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:"

        if isinstance(target, CallbackQuery):
            await message_to_edit_or_answer.edit_text(text_to_send, reply_markup=keyboard)
        else: # Message
            await message_to_edit_or_answer.answer(text_to_send, reply_markup=keyboard)
        await state.set_state(Form.date) #

    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç –¥–ª—è {user_name} –≤ show_available_dates_for_booking: {type(e).__name__} - {e}", file=sys.stderr)
        error_text = "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –¥–∞—Ç."
        if isinstance(target, CallbackQuery):
            try:
                await message_to_edit_or_answer.edit_text(
                    f"{error_text} –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥.",
                    reply_markup=get_service_choice_keyboard()) #
                await state.set_state(Form.service_choice) #
            except: # –í —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ
                await message_to_edit_or_answer.answer(f"{error_text} –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
                await state.clear()
        else: # Message
            await message_to_edit_or_answer.answer(f"{error_text} –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
            await state.clear()
