# /root/telegram-schedule-bot/bot/handlers.py
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ö–µ–Ω–¥–ª–µ—Ä—ã) –¥–ª—è –∫–æ–º–∞–Ω–¥, —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–ª–±–µ–∫–æ–≤.
# –ò—Å–ø–æ–ª—å–∑—É–µ–º Aiogram Router –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.

import os
import sys
from datetime import datetime
import pytz # <<< –î–û–î–ê–ô–¢–ï –¶–ï–ô –Ü–ú–ü–û–†–¢

from aiogram import Router, types, F
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞, —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —É—Ç–∏–ª–∏—Ç—ã
from .bot import bot, ADMIN_CHAT_ID  # –ò–∑ –Ω–∞—à–µ–≥–æ bot.py
from .states import Form
from .keyboards import (
    get_service_choice_keyboard,
    get_dates_keyboard,
    get_times_keyboard,
    get_share_contact_keyboard,
    get_back_to_main_menu_keyboard,
    get_messenger_choice_keyboard, # <<< –ù–ê–® –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢
    MESSENGER_OPTIONS # <<< –Ü–ú–ü–û–†–¢–£–Ñ–ú–û –û–ü–¶–Ü–á –ú–ï–°–ï–ù–î–ñ–ï–†–Ü–í
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
from .google_sheets import (
    get_available_dates,
    update_status,
    get_client_provided_name,
    save_or_update_client_name,
    get_gspread_client,  # –ù—É–∂–µ–Ω –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
    SPREADSHEET_NAME,  # –ù—É–∂–Ω—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
    REQUESTS_WORKSHEET_NAME,
    STATUS_BOOKED,
    KYIV_TZ,
    # DATE_FORMAT_IN_SHEET # –£–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ keyboards.py

)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from .utils import notify_admin_new_contact, notify_admin_new_booking, notify_admin_new_booking_extended

# –Ø–∫—â–æ KYIV_TZ –Ω–µ —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è, –≤–∏–∑–Ω–∞—á—Ç–µ –π–æ–≥–æ —Ç—É—Ç:
if 'KYIV_TZ' not in globals():
    KYIV_TZ = pytz.timezone('Europe/Kiev')

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
main_router = Router(name="main_handlers_router")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ ---
async def show_service_choice_menu(target_message_or_callback: types.TelegramObject, state: FSMContext,
                                   user_name: str = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ."""
    await state.set_state(Form.service_choice)
    keyboard = get_service_choice_keyboard()
    greeting = f"–ü—Ä–∏–≤—ñ—Ç, {user_name}! üëã\n" if user_name else "–ü—Ä–∏–≤—ñ—Ç! üëã\n"
    text = f"{greeting}–Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?"

    if isinstance(target_message_or_callback, CallbackQuery):
        try:
            await target_message_or_callback.message.edit_text(text, reply_markup=keyboard)
        except Exception as e_edit:
            print(f"DEBUG [handlers.py]: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ. –û—à–∏–±–∫–∞: {e_edit}",
                  file=sys.stderr)
            await target_message_or_callback.message.answer(text, reply_markup=keyboard)
    elif isinstance(target_message_or_callback, Message):
        await target_message_or_callback.answer(text, reply_markup=keyboard)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@main_router.message(CommandStart())
async def cmd_start_handler(message: Message, state: FSMContext, remembered_name: str = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    await state.clear()
    user_id = message.from_user.id
    stored_name = None

    if not remembered_name:
        try:
            stored_name = get_client_provided_name(user_id)
        except Exception as e:
            print(f"–û–®–ò–ë–ö–ê [handlers.py]: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞: {type(e).__name__} - {e}",
                  file=sys.stderr)

    display_name = remembered_name or stored_name
    if display_name:
        await state.update_data(name=display_name)

    await show_service_choice_menu(message, state, display_name)


@main_router.message(Command("rename"))
async def cmd_rename_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /rename –¥–ª—è –∑–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    await state.clear()  # –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—Å—Ç–∏–º–æ –±—É–¥—å-—è–∫–∏–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω
    user_id = message.from_user.id

    # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ —ñ–º'—è —Å–ø–æ—á–∞—Ç–∫—É –∑ FSM, –ø–æ—Ç—ñ–º –∑ Google Sheets
    user_fsm_data = await state.get_data()
    current_name = user_fsm_data.get("name")

    if not current_name:
        try:
            current_name_from_sheet = get_client_provided_name(user_id)
            if current_name_from_sheet:
                current_name = current_name_from_sheet
        except Exception as e:
            print(f"DEBUG [handlers.py]: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è /rename user {user_id}: {e}", file=sys.stderr)

    if current_name:
        await state.update_data(
            current_name_for_rename=current_name)  # –ó–±–µ—Ä–µ–∂–µ–º–æ –ø–æ—Ç–æ—á–Ω–µ —ñ–º'—è –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
        await message.answer(
            f"–í–∞—à–µ –ø–æ—Ç–æ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–µ —ñ–º'—è: <b>{current_name}</b>.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:",
            parse_mode="HTML"
        )
        await state.set_state(Form.renaming_name)
    else:
        await message.answer(
            "–ó–¥–∞—î—Ç—å—Å—è, –¥–ª—è –≤–∞—Å —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —ñ–º'—è. –í–∏ –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ, "
            "—Å–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏—Å—å —Ñ—É–Ω–∫—Ü—ñ—î—é –∑–∞–ø–∏—Å—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∞–±–æ –∑–∞–ª–∏—à–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É."
        )
        await message.answer(
            "–ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?",
            reply_markup=get_back_to_main_menu_keyboard()
        )


@main_router.message(StateFilter(Form.renaming_name), F.text)
async def process_new_name_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤–µ —ñ–º'—è, –≤–≤–µ–¥–µ–Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    new_name = message.text.strip()
    user_id = message.from_user.id
    tg_username = f"@{message.from_user.username}" if message.from_user.username else ""

    if not new_name:  # –ü—Ä–æ—Å—Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
        await message.answer("–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è:")
        return  # –ó–∞–ª–∏—à–∞—î–º–æ—Å—è –≤ —Å—Ç–∞–Ω—ñ Form.renaming_name

    try:
        save_or_update_client_name(user_id, tg_username, new_name)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –≤ Google Sheets
        await state.update_data(name=new_name)  # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º'—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Å—Ç–∞–Ω—ñ FSM

        await message.answer(
            f"–í–∞—à–µ —ñ–º'—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: <b>{new_name}</b>.",
            parse_mode="HTML"
        )
        print(f"DEBUG [handlers.py]: –Ü–º'—è –¥–ª—è user {user_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_name}' —á–µ—Ä–µ–∑ /rename.", file=sys.stderr)

        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await message.answer(
            "–ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?",
            reply_markup=get_back_to_main_menu_keyboard()
        )
        await state.clear()  # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –∑–º—ñ–Ω–∏

    except Exception as e:
        print(
            f"–û–®–ò–ë–ö–ê [handlers.py]: –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è user {user_id} —á–µ—Ä–µ–∑ /rename: {type(e).__name__} - {e}",
            file=sys.stderr)
        await message.answer("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await message.answer(
            "–ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?",
            reply_markup=get_back_to_main_menu_keyboard()
        )
        await state.clear()


@main_router.message(StateFilter(Form.renaming_name)) # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É
async def process_new_name_invalid_input_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥, –∫–æ–ª–∏ –æ—á—ñ–∫—É—î—Ç—å—Å—è –Ω–æ–≤–µ —ñ–º'—è."""
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –Ω–æ–≤–µ —ñ–º'—è —Ç–µ–∫—Å—Ç–æ–º. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–º—ñ–Ω—É —ñ–º–µ–Ω—ñ, –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start.")


@main_router.callback_query(StateFilter(Form.service_choice))
async def service_choice_callback_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø–æ—Å–ª—É–≥–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏, —á–∏ –≤—ñ–¥–æ–º–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    await callback.answer()
    choice_data = callback.data

    user_id = callback.from_user.id
    user_fsm_data = await state.get_data()
    user_name = user_fsm_data.get("name")

    if not user_name:  # –Ø–∫—â–æ —ñ–º–µ–Ω—ñ –Ω–µ–º–∞—î –≤ —Å—Ç–∞–Ω—ñ FSM
        try:
            print(
                f"DEBUG [handlers.py]: –Ü–º'—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ FSM –¥–ª—è user {user_id}. –ó–∞–ø–∏—Ç –¥–æ get_client_provided_name...",
                file=sys.stderr)
            user_name_from_sheet = get_client_provided_name(user_id)  # –§—É–Ω–∫—Ü—ñ—è –∑ google_sheets.py
            if user_name_from_sheet:
                user_name = user_name_from_sheet
                await state.update_data(name=user_name)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–µ —ñ–º'—è –≤ FSM
                print(f"DEBUG [handlers.py]: –Ü–º'—è '{user_name}' –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è user {user_id} —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ FSM.",
                      file=sys.stderr)
            else:
                print(f"DEBUG [handlers.py]: –Ü–º'—è –¥–ª—è user {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω—ñ –≤ FSM, –Ω—ñ –≤ Sheets.",
                      file=sys.stderr)
        except Exception as e:
            print(f"–û–®–ò–ë–ö–ê [handlers.py]: –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–º–µ–Ω—ñ –¥–ª—è user {user_id} –≤ service_choice: {e}",
                  file=sys.stderr)

    # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–∏–±–æ—Ä—É
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e_edit_markup:
        print(f"DEBUG [handlers.py]: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤ service_choice: {e_edit_markup}",
              file=sys.stderr)

    if choice_data == "ask_contact":
        if user_name:  # –Ø–∫—â–æ —ñ–º'—è –≤—ñ–¥–æ–º–µ
            await state.set_state(Form.phone_number)
            keyboard = get_share_contact_keyboard()
            # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
            await callback.message.answer(  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ, –±–æ edit_reply_markup –≤–∂–µ –±—É–ª–æ
                f"–î—è–∫—É—é, {user_name}! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, "
                "–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É) –≤—Ä—É—á–Ω—É:",
                reply_markup=keyboard
            )
        else:  # –Ø–∫—â–æ —ñ–º'—è –Ω–µ–≤—ñ–¥–æ–º–µ
            await state.set_state(Form.callback_name)
            await callback.message.answer("–î–æ–±—Ä–µ, —è –∑–∞–ø–∏—à—É –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

    elif choice_data == "book_consultation":
        if user_name:  # –Ø–∫—â–æ —ñ–º'—è –≤—ñ–¥–æ–º–µ
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏, –≤–∏–∫–ª–∏–∫–∞—é—á–∏ –Ω–æ–≤—É –¥–æ–ø–æ–º—ñ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            # –í–æ–Ω–∞ –æ–Ω–æ–≤–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è callback.message
            await show_available_dates_for_booking(callback, state, user_name)
        else:  # –Ø–∫—â–æ —ñ–º'—è –Ω–µ–≤—ñ–¥–æ–º–µ
            await state.set_state(Form.booking_name)
            await callback.message.answer("–î–æ–±—Ä–µ, –∑–∞–ø–∏—à–µ–º–æ –≤–∞—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

    else:
        await callback.message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()


@main_router.message(StateFilter(Form.callback_name))
async def callback_name_handler(message: Message, state: FSMContext):
    """–û—Ç—Ä–∏–º—É—î —ñ–º'—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –¥–∑–≤—ñ–Ω–∫–∞, –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ —ñ –∑–∞–ø–∏—Ç—É—î —Ç–µ–ª–µ—Ñ–æ–Ω."""
    user_name_provided = message.text
    await state.update_data(name=user_name_provided)
    user_id = message.from_user.id
    tg_username = f"@{message.from_user.username}" if message.from_user.username else ""

    try:
        save_or_update_client_name(user_id, tg_username, user_name_provided)
        print(
            f"DEBUG [handlers.py]: –Ü–º'—è '{user_name_provided}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è user {user_id} (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫).",
            file=sys.stderr)
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ (–≥—ñ–ª–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É): {type(e).__name__} - {e}",
              file=sys.stderr)

    await state.set_state(Form.phone_number)
    keyboard = get_share_contact_keyboard()
    await message.answer(
        f"–î—è–∫—É—é, {user_name_provided}! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, "
        "–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É) –≤—Ä—É—á–Ω—É:",
        reply_markup=keyboard
    )


# /root/telegram-schedule-bot/bot/handlers.py

@main_router.message(StateFilter(Form.phone_number), F.contact)
async def contact_shared_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–Ω—Ç–∞–∫—Ç, —è–∫–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–¥—ñ–ª–∏–≤—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."""
    contact_info = message.contact.phone_number
    user_id = message.from_user.id
    telegram_username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {user_id}")
    await state.update_data(contact=contact_info)

    try:
        timestamp = datetime.now(KYIV_TZ).strftime("%d.%m.%Y %H:%M:%S") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ KYIV_TZ, —è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
        g_client = get_gspread_client()
        sheet = g_client.open(SPREADSHEET_NAME).worksheet(REQUESTS_WORKSHEET_NAME)
        print(f"DEBUG [handlers.py]: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SHARED –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è {user_name}...", file=sys.stderr)
        sheet.append_row([
            user_name, contact_info, "–ó–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ (–∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—à–∞—Ä–µ–Ω–æ)",
            telegram_username, "", "", timestamp
        ])
        print("DEBUG [handlers.py]: SHARED –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", file=sys.stderr)

        await notify_admin_new_contact(bot, ADMIN_CHAT_ID, user_name, contact_info, telegram_username, user_id,
                                       timestamp, "–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ—à–∞—Ä–µ–Ω–æ")

        await message.answer(
            f"–î—è–∫—É—é, {user_name}! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {contact_info} –æ—Ç—Ä–∏–º–∞–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        # –ó–ê–ú–Ü–°–¢–¨: await cmd_start_handler(message, state, remembered_name=user_name)
        # –ù–ê–î–Ü–°–õ–ê–¢–ò –ö–ù–û–ü–ö–£:
        await message.answer(
            "–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –ø—Ä–∏–π–Ω—è—Ç–æ. –ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?",
            reply_markup=get_back_to_main_menu_keyboard()
        )
        await state.clear() # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è

    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SHARED –∫–æ–Ω—Ç–∞–∫—Ç–∞: {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö...", reply_markup=ReplyKeyboardRemove())
        await state.clear()


# /root/telegram-schedule-bot/bot/handlers.py

@main_router.message(StateFilter(Form.phone_number), F.text)
async def get_phone_number_text_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä—É—á–Ω—É—é."""
    contact_info = message.text
    user_id = message.from_user.id
    telegram_username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {user_id}")
    await state.update_data(contact=contact_info)

    try:
        g_client = get_gspread_client()
        sheet = g_client.open(SPREADSHEET_NAME).worksheet(REQUESTS_WORKSHEET_NAME)
        timestamp = datetime.now(KYIV_TZ).strftime("%d.%m.%Y %H:%M:%S") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ KYIV_TZ, —è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
        print(f"DEBUG [handlers.py]: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ TYPED –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è {user_name}...", file=sys.stderr)
        sheet.append_row([
            user_name, contact_info, "–ó–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ (–∫–æ–Ω—Ç–∞–∫—Ç –≤–≤–µ–¥–µ–Ω–æ)",
            telegram_username, "", "", timestamp
        ])
        print("DEBUG [handlers.py]: TYPED –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", file=sys.stderr)

        await notify_admin_new_contact(bot, ADMIN_CHAT_ID, user_name, contact_info, telegram_username, user_id,
                                       timestamp, "–ö–æ–Ω—Ç–∞–∫—Ç –≤–≤–µ–¥–µ–Ω–æ")

        await message.answer(
            f"–î—è–∫—É—é, {user_name}! –í–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ: '{contact_info}' –æ—Ç—Ä–∏–º–∞–Ω—ñ. –Ø –∑–≤'—è–∂—É—Å—è –∑ –≤–∞–º–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        # –ó–ê–ú–Ü–°–¢–¨: await cmd_start_handler(message, state, remembered_name=user_name)
        # –ù–ê–î–Ü–°–õ–ê–¢–ò –ö–ù–û–ü–ö–£:
        await message.answer(
            "–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –ø—Ä–∏–π–Ω—è—Ç–æ. –ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?",
            reply_markup=get_back_to_main_menu_keyboard()
        )
        await state.clear() # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è

    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è TYPED –∫–æ–Ω—Ç–∞–∫—Ç–∞: {type(e).__name__} - {e}", file=sys.stderr)
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö...", reply_markup=ReplyKeyboardRemove())
        await state.clear()


# --- –í–µ—Ç–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" ---
# /root/telegram-schedule-bot/bot/handlers.py

@main_router.message(StateFilter(Form.booking_name))
async def booking_name_handler(message: Message, state: FSMContext):
    """–û—Ç—Ä–∏–º—É—î —ñ–º'—è –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ —ñ –ø–æ–∫–∞–∑—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏."""
    user_name_provided = message.text
    await state.update_data(name=user_name_provided)
    user_id = message.from_user.id
    # tg_username –º–æ–∂–µ –±—É—Ç–∏ None, save_or_update_client_name –º–∞—î —Ü–µ –æ–±—Ä–æ–±–ª—è—Ç–∏
    tg_username = f"@{message.from_user.username}" if message.from_user.username else ""

    try:
        save_or_update_client_name(user_id, tg_username, user_name_provided)
        print(f"DEBUG [handlers.py]: –Ü–º'—è '{user_name_provided}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è user {user_id}.",
              file=sys.stderr)
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ (–≥—ñ–ª–∫–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è): {type(e).__name__} - {e}",
              file=sys.stderr)

    # –¢–µ–ø–µ—Ä –≤–∏–∫–ª–∏–∫–∞—î–º–æ –¥–æ–ø–æ–º—ñ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    await show_available_dates_for_booking(message, state, user_name_provided)





# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" ---
@main_router.callback_query(F.data == "back_to_service_choice_from_date", StateFilter(Form.date))
async def back_to_service_choice_from_date_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏ –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    await callback.answer()
    user_data = await state.get_data()
    user_name = user_data.get("name")
    await show_service_choice_menu(callback, state, user_name)


@main_router.callback_query(F.data == "back_to_date_selection", StateFilter(Form.time))
async def back_to_date_selection_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    await callback.answer()
    user_data = await state.get_data()
    user_name = user_data.get("name")
    try:
        available_dates = get_available_dates()
        if not available_dates:
            await callback.message.edit_text("–ù–∞ –∂–∞–ª—å, –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç. –ü–æ–≤–µ—Ä—Ç–∞—é –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.")
            await show_service_choice_menu(callback, state, user_name)
            return
        keyboard = get_dates_keyboard(available_dates)  # DATE_FORMAT_IN_SHEET –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ get_dates_keyboard
        await callback.message.edit_text(
            f"{user_name}, –æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Å—É (–Ω–∞ 7 –¥–Ω—ñ–≤):\n–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:",
            reply_markup=keyboard
        )
        await state.set_state(Form.date)
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –≤ back_to_date_selection: {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤–µ—Ä—Ç–∞—é –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.")
        await show_service_choice_menu(callback, state, user_name)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏, –≤–æ–ø—Ä–æ—Å–∞ ---
@main_router.callback_query(StateFilter(Form.date), F.data.startswith("date_"))
async def get_date_callback_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    await callback.answer()
    selected_date = callback.data.split("date_")[1]
    try:
        available_dates = get_available_dates()
        if selected_date in available_dates and available_dates[selected_date]:
            available_times = available_dates[selected_date]
            await state.update_data(date=selected_date)
            await state.set_state(Form.time)
            keyboard = get_times_keyboard(available_times)
            await callback.message.edit_text(
                f"–î–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏ –Ω–∞ {selected_date}:\n–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å:",
                reply_markup=keyboard
            )
        else:
            keyboard = get_dates_keyboard(
                available_dates)  # DATE_FORMAT_IN_SHEET –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ get_dates_keyboard
            await callback.message.edit_text(
                "–ù–∞ –∂–∞–ª—å, —Ü—è –¥–∞—Ç–∞ –∞–±–æ —á–∞—Å –Ω–∞ –Ω–µ—ó –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥'.",
                reply_markup=keyboard
            )
            await state.set_state(Form.date)
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –ø–æ–ª—É—á–µ–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã (callback): {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()


@main_router.callback_query(StateFilter(Form.time), F.data.startswith("time_"))
async def get_time_callback_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    await callback.answer()
    selected_time = callback.data.split("time_")[1]
    user_data = await state.get_data()
    selected_date = user_data.get("date")
    user_name = user_data.get("name", f"User {callback.from_user.id}")

    if not selected_date:
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É). –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()
        return
    try:
        booking_successful = update_status(selected_date, selected_time, STATUS_BOOKED)
        if booking_successful:
            await state.update_data(time=selected_time)
            await state.set_state(Form.question)
            await callback.message.edit_text(
                f"–ß–∞—Å {selected_date} {selected_time} —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ!\n–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –º–µ—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:"
            )
        else:
            current_available_dates = get_available_dates()
            if selected_date in current_available_dates and current_available_dates[selected_date]:
                keyboard = get_times_keyboard(current_available_dates[selected_date])
                await callback.message.edit_text(
                    f"–ù–∞ –∂–∞–ª—å, —á–∞—Å {selected_time} –Ω–∞ {selected_date} —â–æ–π–Ω–æ –∑–∞–π–Ω—è–ª–∏ –∞–±–æ —Å—Ç–∞–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–º. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π:",
                    reply_markup=keyboard
                )
                await state.set_state(Form.time)
            else:
                await callback.message.edit_text(
                    f"–ù–∞ –∂–∞–ª—å, –Ω–∞ {selected_date} –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥' –∞–±–æ –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
                await state.set_state(Form.date)
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –ø—ñ–¥ —á–∞—Å —Å–ø—Ä–æ–±–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —á–∞—Å: {type(e).__name__} - {e}", file=sys.stderr)
        await callback.message.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()


@main_router.message(StateFilter(Form.question))
async def get_question_handler(message: Message, state: FSMContext):
    """–û—Ç—Ä–∏–º—É—î –ø–∏—Ç–∞–Ω–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ –≤ FSM —Ç–∞ –∑–∞–ø–∏—Ç—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó."""
    question_text = message.text
    await state.update_data(question=question_text)
    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {message.from_user.id}")

    print(f"DEBUG [handlers.py]: –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {user_name} –æ—Ç—Ä–∏–º–∞–Ω–æ: '{question_text}'. –ó–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É...",
          file=sys.stderr)

    await state.set_state(Form.booking_phone_number)
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
    keyboard = get_share_contact_keyboard()
    await message.answer(
        f"–î—è–∫—É—é, –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ: \"{question_text}\".\n\n"
        f"–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º <b>–Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>. –í—ñ–Ω –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –∑–≤'—è–∑–∫—É —â–æ–¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —Ç–∞ —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@main_router.message(StateFilter(Form.booking_phone_number), F.contact)
async def booking_phone_shared_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø–æ—à–∏—Ä–µ–Ω–∏–π) –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —Ç–∞ –∑–∞–ø–∏—Ç—É—î –º–µ—Å–µ–Ω–¥–∂–µ—Ä."""
    phone_number = message.contact.phone_number
    await state.update_data(booking_phone_number=phone_number)
    user_data = await state.get_data()  # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
    user_name = user_data.get("name", f"User {message.from_user.id}")

    print(
        f"DEBUG [handlers.py]: –ù–æ–º–µ—Ä —Ç–µ–ª. '{phone_number}' (–ø–æ—à–∏—Ä–µ–Ω–∏–π) –¥–ª—è –∫–æ–Ω—Å. –≤—ñ–¥ {user_name} –æ—Ç—Ä–∏–º–∞–Ω–æ. –ó–∞–ø–∏—Ç –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞...",
        file=sys.stderr)

    await state.set_state(Form.messenger_choice)
    keyboard = get_messenger_choice_keyboard()
    await message.answer(  # –í—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ ReplyKeyboardRemove, –æ—Å–∫—ñ–ª—å–∫–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –±—É–ª–∞ one_time_keyboard
        f"–î—è–∫—É—é! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: <code>{phone_number}</code>.\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π –º–µ—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è –≤—ñ–¥–µ–æ–¥–∑–≤—ñ–Ω–∫–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# –ù–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–≤–µ–¥–µ–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É)
@main_router.message(StateFilter(Form.booking_phone_number), F.text)
async def booking_phone_text_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–≤–µ–¥–µ–Ω–∏–π –≤—Ä—É—á–Ω—É) –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —Ç–∞ –∑–∞–ø–∏—Ç—É—î –º–µ—Å–µ–Ω–¥–∂–µ—Ä."""
    phone_number = message.text
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±–∞–∑–æ–≤—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    await state.update_data(booking_phone_number=phone_number)
    user_data = await state.get_data()  # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
    user_name = user_data.get("name", f"User {message.from_user.id}")

    print(
        f"DEBUG [handlers.py]: –ù–æ–º–µ—Ä —Ç–µ–ª. '{phone_number}' (–≤–≤–µ–¥–µ–Ω–∏–π) –¥–ª—è –∫–æ–Ω—Å. –≤—ñ–¥ {user_name} –æ—Ç—Ä–∏–º–∞–Ω–æ. –ó–∞–ø–∏—Ç –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞...",
        file=sys.stderr)

    await state.set_state(Form.messenger_choice)
    keyboard = get_messenger_choice_keyboard()
    await message.answer(  # –í—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ ReplyKeyboardRemove
        f"–î—è–∫—É—é! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: <code>{phone_number}</code>.\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π –º–µ—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è –≤—ñ–¥–µ–æ–¥–∑–≤—ñ–Ω–∫–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# –ù–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞ —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
@main_router.callback_query(StateFilter(Form.messenger_choice), F.data.startswith("messenger_"))
async def messenger_choice_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞ —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
    await callback.answer()
    chosen_messenger_key = callback.data.split("messenger_")[1]
    chosen_messenger_text = MESSENGER_OPTIONS.get(chosen_messenger_key,
                                                  chosen_messenger_key.capitalize())  # –û—Ç—Ä–∏–º—É—î–º–æ —á–∏—Ç–∞–±–µ–ª—å–Ω—É –Ω–∞–∑–≤—É

    await state.update_data(preferred_messenger=chosen_messenger_text)

    user_data = await state.get_data()
    user_name = user_data.get("name", f"User {callback.from_user.id}")
    selected_date = user_data.get("date")
    selected_time = user_data.get("time")
    question = user_data.get("question")
    booking_phone_number = user_data.get("booking_phone_number")  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É

    user_id = callback.from_user.id
    telegram_username = f"@{callback.from_user.username}" if callback.from_user.username else f"ID:{user_id}"

    if not all([selected_date, selected_time, question, booking_phone_number, chosen_messenger_text]):
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É (–Ω–µ –≤—Å—ñ –¥–∞–Ω—ñ –∑—ñ–±—Ä–∞–Ω–æ). –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
        await state.clear()
        return

    try:
        g_client = get_gspread_client()
        sheet = g_client.open(SPREADSHEET_NAME).worksheet(REQUESTS_WORKSHEET_NAME)

        timestamp = datetime.now(KYIV_TZ).strftime("%d.%m.%Y %H:%M:%S")

        print(f"DEBUG [handlers.py]: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è {user_name} –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —ñ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–æ–º...", file=sys.stderr)
        # –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —É Google Sheets:
        # –Ü–º'—è, –¢–µ–ª–µ–≥—Ä–∞–º-–∫–æ–Ω—Ç–∞–∫—Ç, –ü–∏—Ç–∞–Ω–Ω—è, User ID, –î–∞—Ç–∞, –ß–∞—Å, –ß–∞—Å –∑–∞–ø–∏—Å—É, –¢–µ–ª–µ—Ñ–æ–Ω (–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è), –ú–µ—Å–µ–Ω–¥–∂–µ—Ä
        sheet.append_row([
            user_name,
            telegram_username,  # –ö–æ–Ω—Ç–∞–∫—Ç –≤ Telegram
            question,
            str(user_id),
            selected_date,
            selected_time,
            timestamp,
            booking_phone_number,  # <<< –ù–û–í–ï –ü–û–õ–ï
            chosen_messenger_text  # <<< –ù–û–í–ï –ü–û–õ–ï
        ])
        print("DEBUG [handlers.py]: –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ (–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —ñ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–æ–º).", file=sys.stderr)

        # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        await notify_admin_new_booking_extended(
            bot_instance=bot,  # –ü–µ—Ä–µ–¥–∞—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            admin_chat_id=ADMIN_CHAT_ID,
            user_name=user_name,
            selected_date=selected_date,
            selected_time=selected_time,
            question=question,
            telegram_username=telegram_username,
            user_id=user_id,
            timestamp=timestamp,
            booking_phone=booking_phone_number,  # <<< –ù–û–í–ò–ô –ü–ê–†–ê–ú–ï–¢–†
            preferred_messenger=chosen_messenger_text  # <<< –ù–û–í–ò–ô –ü–ê–†–ê–ú–ï–¢–†
        )

        await callback.message.edit_text(
            f"–î—è–∫—É—é, {user_name}! –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é ({selected_date} {selected_time}) –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
            f"<b>–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:</b> <code>{booking_phone_number}</code>\n"
            f"<b>–ë–∞–∂–∞–Ω–∏–π –º–µ—Å–µ–Ω–¥–∂–µ—Ä:</b> {chosen_messenger_text}",
            parse_mode="HTML"
        )

        lawyer_contact = os.getenv("LAWYER_CONTACT_DETAILS", "–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –∞–¥–≤–æ–∫–∞—Ç–∞ (—Ç–µ–ª/email)")
        payment_info = os.getenv("PAYMENT_DETAILS_TEXT", "—Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤–∞–º –¥–æ–¥–∞—Ç–∫–æ–≤–æ")

        # –û–Ω–æ–≤–ª—é—î–º–æ details_html, —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ –º–µ—Å–µ–Ω–¥–∂–µ—Ä
        details_html = (
            f"üóìÔ∏è <b>–î–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É:</b> {selected_date} –æ {selected_time}.\n\n"
            f"<b>–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:</b>\n\n"
            f"1Ô∏è‚É£ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º <code>{booking_phone_number}</code> (–±–∞–∂–∞–Ω–∏–π –º–µ—Å–µ–Ω–¥–∂–µ—Ä: {chosen_messenger_text}) –Ω–µ–∑–∞–¥–æ–≤–≥–æ –¥–æ –ø–æ—á–∞—Ç–∫—É, —â–æ–± —É–∑–≥–æ–¥–∏—Ç–∏ –∑—Ä—É—á–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (Zoom, Google Meet, Teams, Viber, WhatsApp, Telegram —Ç–æ—â–æ) —Ç–∞ –Ω–∞–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n\n"
            f"2Ô∏è‚É£ <b>–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞:</b> –Ø–∫—â–æ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –ø—ñ–¥–≥–æ—Ç—É–π—Ç–µ —ó—Ö –∫–æ–ø—ñ—ó/—Ñ–æ—Ç–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–±–µ–∑–ø–µ—á—Ç–µ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–∞ —Ç–∏—Ö–µ –º—ñ—Å—Ü–µ.\n\n"
            f"3Ô∏è‚É£ <b>–û–ø–ª–∞—Ç–∞:</b> –í–∞—Ä—Ç—ñ—Å—Ç—å - <b>1000 –≥—Ä–Ω/–≥–æ–¥</b>. {payment_info}\n\n"
            f"4Ô∏è‚É£ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è:</b> –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ñ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è. –ê–¥–≤–æ–∫–∞—Ç –ú–µ—Ä–∫–æ–≤–∏—á –ë–æ–≥–¥–∞–Ω –Ω–∞–¥–∞—Å—Ç—å –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ä–æ–∑'—è—Å–Ω–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.\n\n"
            f"5Ô∏è‚É£ <b>–ó–≤'—è–∑–æ–∫:</b> –ó —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å —â–æ–¥–æ –∑–∞–ø–∏—Å—É <i>–¥–æ</i> –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å: {lawyer_contact}.\n\n"
            f"–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∑–≤'—è–∑–æ–∫ –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏!"
        )
        await callback.message.answer(details_html, parse_mode="HTML")

        await callback.message.answer(
            "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ. –ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?",
            reply_markup=get_back_to_main_menu_keyboard()
        )
        await state.clear()

    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê [handlers.py]: –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó (–∑ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–æ–º): {type(e).__name__} - {e}",
              file=sys.stderr)
        await callback.message.answer("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É...")
        await callback.message.answer(
            "–ë–∞–∂–∞—î—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é?",
            reply_markup=get_back_to_main_menu_keyboard()
        )
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@main_router.message(StateFilter(None))  # StateFilter(None) –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
async def handle_unknown_text_messages(message: Message, state: FSMContext):
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await message.answer("–ù–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ –∫–æ–º–∞–Ω–¥–∏ /start, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó.")


@main_router.callback_query(F.data == "main_menu_start",
                            StateFilter(None))  # StateFilter(None) –æ—Å–∫—ñ–ª—å–∫–∏ —Å—Ç–∞–Ω –≤–∂–µ –º–∞—î –±—É—Ç–∏ –æ—á–∏—â–µ–Ω–∏–π
async def back_to_main_menu_callback_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'."""
    await callback.answer()

    # –°—Ç–∞–Ω –≤–∂–µ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ—á–∏—â–µ–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä–æ–º, —è–∫–∏–π –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–≤ —Ü—é –∫–Ω–æ–ø–∫—É.
    # –ê–ª–µ –¥–ª—è –ø–µ–≤–Ω–æ—Å—Ç—ñ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —â–µ —Ä–∞–∑:
    await state.clear()

    user_id = callback.from_user.id
    display_name = None
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º'—è, —è–∫–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥–∞–≤–∞–≤ —Ä–∞–Ω—ñ—à–µ
        stored_name = get_client_provided_name(user_id)
        if stored_name:
            display_name = stored_name
            await state.update_data(name=display_name)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ FSM –¥–ª—è show_service_choice_menu
    except Exception as e:
        print(f"DEBUG [handlers.py]: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º'—è –¥–ª—è user {user_id} –≤ main_menu_start: {e}",
              file=sys.stderr)

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ–∫–∞–∑—É –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥
    # –í–æ–Ω–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤ —è–∫–æ–º—É –±—É–ª–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    await show_service_choice_menu(callback, state, user_name=display_name)


# /root/telegram-schedule-bot/bot/handlers.py

async def show_available_dates_for_booking(target: types.TelegramObject, state: FSMContext, user_name: str):
    """–û—Ç—Ä–∏–º—É—î —Ç–∞ –ø–æ–∫–∞–∑—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –†–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ target - CallbackQuery."""
    message_to_edit_or_answer = None
    if isinstance(target, CallbackQuery):
        message_to_edit_or_answer = target.message
    elif isinstance(target, Message):
        message_to_edit_or_answer = target
    else:
        print("ERROR [handlers.py]: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø target –¥–ª—è show_available_dates_for_booking", file=sys.stderr)
        return

    try:
        print(f"DEBUG [handlers.py]: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç...",
              file=sys.stderr)
        available_dates = get_available_dates()

        if not available_dates:
            no_dates_text = f"–ù–∞ –∂–∞–ª—å, {user_name}, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            if isinstance(target, CallbackQuery):
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞—Ç, —ñ —Ü–µ –∫–æ–ª–±–µ–∫, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥
                await message_to_edit_or_answer.edit_text(no_dates_text, reply_markup=get_service_choice_keyboard())
                await state.set_state(Form.service_choice)
            else:  # –Ø–∫—â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ)
                await message_to_edit_or_answer.answer(no_dates_text)
                # –Ü –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑–Ω–æ–≤—É
                await show_service_choice_menu(message_to_edit_or_answer, state, user_name)
            return

        keyboard = get_dates_keyboard(available_dates)
        text_to_send = f"–î—è–∫—É—é, {user_name}! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Å—É (–Ω–∞ 7 –¥–Ω—ñ–≤):\n–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:"

        if isinstance(target, CallbackQuery):
            await message_to_edit_or_answer.edit_text(text_to_send, reply_markup=keyboard)
        else:  # Message
            await message_to_edit_or_answer.answer(text_to_send, reply_markup=keyboard)

        await state.set_state(Form.date)

    except Exception as e:
        print(
            f"–û–®–ò–ë–ö–ê [handlers.py]: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç –¥–ª—è {user_name} –≤ show_available_dates_for_booking: {type(e).__name__} - {e}",
            file=sys.stderr)
        error_text = "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –¥–∞—Ç."
        if isinstance(target, CallbackQuery):
            try:
                await message_to_edit_or_answer.edit_text(
                    f"{error_text} –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥.",
                    reply_markup=get_service_choice_keyboard())
                await state.set_state(Form.service_choice)
            except:
                await message_to_edit_or_answer.answer(f"{error_text} –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
                await state.clear()
        else:  # Message
            await message_to_edit_or_answer.answer(f"{error_text} –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /start.")
            await state.clear()
